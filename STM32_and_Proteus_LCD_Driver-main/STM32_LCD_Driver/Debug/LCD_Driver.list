
LCD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001edc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08001fe8  08001fe8  00002fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800205c  0800205c  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800205c  0800205c  0000405c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800205c  0800205c  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800205c  0800205c  0000305c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002060  08002060  00003060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002064  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  080020c0  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080020c0  000041c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002e01  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001054  00000000  00000000  00006e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000468  00000000  00000000  00007ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000323  00000000  00000000  00008348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000169b1  00000000  00000000  0000866b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005b70  00000000  00000000  0001f01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007fc10  00000000  00000000  00024b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a479c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001470  00000000  00000000  000a47e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000a5c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001fd0 	.word	0x08001fd0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08001fd0 	.word	0x08001fd0

0800014c <Delay>:
#include "stm32f1xx_hal.h"
#include "main.h"
#include "LCD.h"
 
void Delay(uint32_t nCount)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 8000154:	e002      	b.n	800015c <Delay+0x10>
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	3b01      	subs	r3, #1
 800015a:	607b      	str	r3, [r7, #4]
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	2b00      	cmp	r3, #0
 8000160:	d1f9      	bne.n	8000156 <Delay+0xa>
}
 8000162:	bf00      	nop
 8000164:	bf00      	nop
 8000166:	370c      	adds	r7, #12
 8000168:	46bd      	mov	sp, r7
 800016a:	bc80      	pop	{r7}
 800016c:	4770      	bx	lr

0800016e <lcd_delay>:
void lcd_delay(void)
{
 800016e:	b580      	push	{r7, lr}
 8000170:	af00      	add	r7, sp, #0
 Delay(1000);
 8000172:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000176:	f7ff ffe9 	bl	800014c <Delay>
}
 800017a:	bf00      	nop
 800017c:	bd80      	pop	{r7, pc}
	...

08000180 <lcd_cmd>:

void lcd_cmd(char out_char)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	4603      	mov	r3, r0
 8000188:	71fb      	strb	r3, [r7, #7]
 LCD_RS_GPIO_Port->BRR  = LCD_RS_Pin;
 800018a:	4b57      	ldr	r3, [pc, #348]	@ (80002e8 <lcd_cmd+0x168>)
 800018c:	2204      	movs	r2, #4
 800018e:	615a      	str	r2, [r3, #20]
 
 LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 8000190:	4b55      	ldr	r3, [pc, #340]	@ (80002e8 <lcd_cmd+0x168>)
 8000192:	2202      	movs	r2, #2
 8000194:	615a      	str	r2, [r3, #20]
 LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8000196:	4b54      	ldr	r3, [pc, #336]	@ (80002e8 <lcd_cmd+0x168>)
 8000198:	2210      	movs	r2, #16
 800019a:	615a      	str	r2, [r3, #20]
 LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 800019c:	4b52      	ldr	r3, [pc, #328]	@ (80002e8 <lcd_cmd+0x168>)
 800019e:	2220      	movs	r2, #32
 80001a0:	615a      	str	r2, [r3, #20]
 LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 80001a2:	4b51      	ldr	r3, [pc, #324]	@ (80002e8 <lcd_cmd+0x168>)
 80001a4:	2240      	movs	r2, #64	@ 0x40
 80001a6:	615a      	str	r2, [r3, #20]
 LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 80001a8:	4b4f      	ldr	r3, [pc, #316]	@ (80002e8 <lcd_cmd+0x168>)
 80001aa:	2280      	movs	r2, #128	@ 0x80
 80001ac:	615a      	str	r2, [r3, #20]
 
 lcd_delay();
 80001ae:	f7ff ffde 	bl	800016e <lcd_delay>
 
 LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80001b2:	4b4d      	ldr	r3, [pc, #308]	@ (80002e8 <lcd_cmd+0x168>)
 80001b4:	68db      	ldr	r3, [r3, #12]
 80001b6:	4a4c      	ldr	r2, [pc, #304]	@ (80002e8 <lcd_cmd+0x168>)
 80001b8:	f043 0302 	orr.w	r3, r3, #2
 80001bc:	60d3      	str	r3, [r2, #12]
  
 if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	f003 0310 	and.w	r3, r3, #16
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d003      	beq.n	80001d0 <lcd_cmd+0x50>
 80001c8:	4b47      	ldr	r3, [pc, #284]	@ (80002e8 <lcd_cmd+0x168>)
 80001ca:	2210      	movs	r2, #16
 80001cc:	611a      	str	r2, [r3, #16]
 80001ce:	e003      	b.n	80001d8 <lcd_cmd+0x58>
 80001d0:	4b45      	ldr	r3, [pc, #276]	@ (80002e8 <lcd_cmd+0x168>)
 80001d2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80001d6:	611a      	str	r2, [r3, #16]
 if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	f003 0320 	and.w	r3, r3, #32
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d003      	beq.n	80001ea <lcd_cmd+0x6a>
 80001e2:	4b41      	ldr	r3, [pc, #260]	@ (80002e8 <lcd_cmd+0x168>)
 80001e4:	2220      	movs	r2, #32
 80001e6:	611a      	str	r2, [r3, #16]
 80001e8:	e003      	b.n	80001f2 <lcd_cmd+0x72>
 80001ea:	4b3f      	ldr	r3, [pc, #252]	@ (80002e8 <lcd_cmd+0x168>)
 80001ec:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80001f0:	611a      	str	r2, [r3, #16]
 if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d003      	beq.n	8000204 <lcd_cmd+0x84>
 80001fc:	4b3a      	ldr	r3, [pc, #232]	@ (80002e8 <lcd_cmd+0x168>)
 80001fe:	2240      	movs	r2, #64	@ 0x40
 8000200:	611a      	str	r2, [r3, #16]
 8000202:	e003      	b.n	800020c <lcd_cmd+0x8c>
 8000204:	4b38      	ldr	r3, [pc, #224]	@ (80002e8 <lcd_cmd+0x168>)
 8000206:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800020a:	611a      	str	r2, [r3, #16]
 if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 800020c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000210:	2b00      	cmp	r3, #0
 8000212:	da03      	bge.n	800021c <lcd_cmd+0x9c>
 8000214:	4b34      	ldr	r3, [pc, #208]	@ (80002e8 <lcd_cmd+0x168>)
 8000216:	2280      	movs	r2, #128	@ 0x80
 8000218:	611a      	str	r2, [r3, #16]
 800021a:	e003      	b.n	8000224 <lcd_cmd+0xa4>
 800021c:	4b32      	ldr	r3, [pc, #200]	@ (80002e8 <lcd_cmd+0x168>)
 800021e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000222:	611a      	str	r2, [r3, #16]
 
 lcd_delay();
 8000224:	f7ff ffa3 	bl	800016e <lcd_delay>
 
 LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000228:	4b2f      	ldr	r3, [pc, #188]	@ (80002e8 <lcd_cmd+0x168>)
 800022a:	2202      	movs	r2, #2
 800022c:	615a      	str	r2, [r3, #20]
 LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 800022e:	4b2e      	ldr	r3, [pc, #184]	@ (80002e8 <lcd_cmd+0x168>)
 8000230:	2210      	movs	r2, #16
 8000232:	615a      	str	r2, [r3, #20]
 LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000234:	4b2c      	ldr	r3, [pc, #176]	@ (80002e8 <lcd_cmd+0x168>)
 8000236:	2220      	movs	r2, #32
 8000238:	615a      	str	r2, [r3, #20]
 LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 800023a:	4b2b      	ldr	r3, [pc, #172]	@ (80002e8 <lcd_cmd+0x168>)
 800023c:	2240      	movs	r2, #64	@ 0x40
 800023e:	615a      	str	r2, [r3, #20]
 LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000240:	4b29      	ldr	r3, [pc, #164]	@ (80002e8 <lcd_cmd+0x168>)
 8000242:	2280      	movs	r2, #128	@ 0x80
 8000244:	615a      	str	r2, [r3, #20]
 
 lcd_delay();
 8000246:	f7ff ff92 	bl	800016e <lcd_delay>
 
 LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 800024a:	4b27      	ldr	r3, [pc, #156]	@ (80002e8 <lcd_cmd+0x168>)
 800024c:	68db      	ldr	r3, [r3, #12]
 800024e:	4a26      	ldr	r2, [pc, #152]	@ (80002e8 <lcd_cmd+0x168>)
 8000250:	f043 0302 	orr.w	r3, r3, #2
 8000254:	60d3      	str	r3, [r2, #12]
 
 if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	f003 0301 	and.w	r3, r3, #1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d003      	beq.n	8000268 <lcd_cmd+0xe8>
 8000260:	4b21      	ldr	r3, [pc, #132]	@ (80002e8 <lcd_cmd+0x168>)
 8000262:	2210      	movs	r2, #16
 8000264:	611a      	str	r2, [r3, #16]
 8000266:	e003      	b.n	8000270 <lcd_cmd+0xf0>
 8000268:	4b1f      	ldr	r3, [pc, #124]	@ (80002e8 <lcd_cmd+0x168>)
 800026a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800026e:	611a      	str	r2, [r3, #16]
 if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000270:	79fb      	ldrb	r3, [r7, #7]
 8000272:	f003 0302 	and.w	r3, r3, #2
 8000276:	2b00      	cmp	r3, #0
 8000278:	d003      	beq.n	8000282 <lcd_cmd+0x102>
 800027a:	4b1b      	ldr	r3, [pc, #108]	@ (80002e8 <lcd_cmd+0x168>)
 800027c:	2220      	movs	r2, #32
 800027e:	611a      	str	r2, [r3, #16]
 8000280:	e003      	b.n	800028a <lcd_cmd+0x10a>
 8000282:	4b19      	ldr	r3, [pc, #100]	@ (80002e8 <lcd_cmd+0x168>)
 8000284:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000288:	611a      	str	r2, [r3, #16]
 if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	f003 0304 	and.w	r3, r3, #4
 8000290:	2b00      	cmp	r3, #0
 8000292:	d003      	beq.n	800029c <lcd_cmd+0x11c>
 8000294:	4b14      	ldr	r3, [pc, #80]	@ (80002e8 <lcd_cmd+0x168>)
 8000296:	2240      	movs	r2, #64	@ 0x40
 8000298:	611a      	str	r2, [r3, #16]
 800029a:	e003      	b.n	80002a4 <lcd_cmd+0x124>
 800029c:	4b12      	ldr	r3, [pc, #72]	@ (80002e8 <lcd_cmd+0x168>)
 800029e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80002a2:	611a      	str	r2, [r3, #16]
 if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	f003 0308 	and.w	r3, r3, #8
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d003      	beq.n	80002b6 <lcd_cmd+0x136>
 80002ae:	4b0e      	ldr	r3, [pc, #56]	@ (80002e8 <lcd_cmd+0x168>)
 80002b0:	2280      	movs	r2, #128	@ 0x80
 80002b2:	611a      	str	r2, [r3, #16]
 80002b4:	e003      	b.n	80002be <lcd_cmd+0x13e>
 80002b6:	4b0c      	ldr	r3, [pc, #48]	@ (80002e8 <lcd_cmd+0x168>)
 80002b8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80002bc:	611a      	str	r2, [r3, #16]

 lcd_delay();
 80002be:	f7ff ff56 	bl	800016e <lcd_delay>
 
 LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 80002c2:	4b09      	ldr	r3, [pc, #36]	@ (80002e8 <lcd_cmd+0x168>)
 80002c4:	2202      	movs	r2, #2
 80002c6:	615a      	str	r2, [r3, #20]
 LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80002c8:	4b07      	ldr	r3, [pc, #28]	@ (80002e8 <lcd_cmd+0x168>)
 80002ca:	2210      	movs	r2, #16
 80002cc:	615a      	str	r2, [r3, #20]
 LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80002ce:	4b06      	ldr	r3, [pc, #24]	@ (80002e8 <lcd_cmd+0x168>)
 80002d0:	2220      	movs	r2, #32
 80002d2:	615a      	str	r2, [r3, #20]
 LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <lcd_cmd+0x168>)
 80002d6:	2240      	movs	r2, #64	@ 0x40
 80002d8:	615a      	str	r2, [r3, #20]
 LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80002da:	4b03      	ldr	r3, [pc, #12]	@ (80002e8 <lcd_cmd+0x168>)
 80002dc:	2280      	movs	r2, #128	@ 0x80
 80002de:	615a      	str	r2, [r3, #20]
}
 80002e0:	bf00      	nop
 80002e2:	3708      	adds	r7, #8
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	40010800 	.word	0x40010800

080002ec <lcd_char_cp>:

void lcd_char_cp(char out_char)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]
 LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 80002f6:	4b59      	ldr	r3, [pc, #356]	@ (800045c <lcd_char_cp+0x170>)
 80002f8:	68db      	ldr	r3, [r3, #12]
 80002fa:	4a58      	ldr	r2, [pc, #352]	@ (800045c <lcd_char_cp+0x170>)
 80002fc:	f043 0304 	orr.w	r3, r3, #4
 8000300:	60d3      	str	r3, [r2, #12]
 
 LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 8000302:	4b56      	ldr	r3, [pc, #344]	@ (800045c <lcd_char_cp+0x170>)
 8000304:	2202      	movs	r2, #2
 8000306:	615a      	str	r2, [r3, #20]
 LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8000308:	4b54      	ldr	r3, [pc, #336]	@ (800045c <lcd_char_cp+0x170>)
 800030a:	2210      	movs	r2, #16
 800030c:	615a      	str	r2, [r3, #20]
 LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 800030e:	4b53      	ldr	r3, [pc, #332]	@ (800045c <lcd_char_cp+0x170>)
 8000310:	2220      	movs	r2, #32
 8000312:	615a      	str	r2, [r3, #20]
 LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8000314:	4b51      	ldr	r3, [pc, #324]	@ (800045c <lcd_char_cp+0x170>)
 8000316:	2240      	movs	r2, #64	@ 0x40
 8000318:	615a      	str	r2, [r3, #20]
 LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 800031a:	4b50      	ldr	r3, [pc, #320]	@ (800045c <lcd_char_cp+0x170>)
 800031c:	2280      	movs	r2, #128	@ 0x80
 800031e:	615a      	str	r2, [r3, #20]
 
 lcd_delay();
 8000320:	f7ff ff25 	bl	800016e <lcd_delay>
 
 LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000324:	4b4d      	ldr	r3, [pc, #308]	@ (800045c <lcd_char_cp+0x170>)
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	4a4c      	ldr	r2, [pc, #304]	@ (800045c <lcd_char_cp+0x170>)
 800032a:	f043 0302 	orr.w	r3, r3, #2
 800032e:	60d3      	str	r3, [r2, #12]
  
 if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	f003 0310 	and.w	r3, r3, #16
 8000336:	2b00      	cmp	r3, #0
 8000338:	d003      	beq.n	8000342 <lcd_char_cp+0x56>
 800033a:	4b48      	ldr	r3, [pc, #288]	@ (800045c <lcd_char_cp+0x170>)
 800033c:	2210      	movs	r2, #16
 800033e:	611a      	str	r2, [r3, #16]
 8000340:	e003      	b.n	800034a <lcd_char_cp+0x5e>
 8000342:	4b46      	ldr	r3, [pc, #280]	@ (800045c <lcd_char_cp+0x170>)
 8000344:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000348:	611a      	str	r2, [r3, #16]
 if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	f003 0320 	and.w	r3, r3, #32
 8000350:	2b00      	cmp	r3, #0
 8000352:	d003      	beq.n	800035c <lcd_char_cp+0x70>
 8000354:	4b41      	ldr	r3, [pc, #260]	@ (800045c <lcd_char_cp+0x170>)
 8000356:	2220      	movs	r2, #32
 8000358:	611a      	str	r2, [r3, #16]
 800035a:	e003      	b.n	8000364 <lcd_char_cp+0x78>
 800035c:	4b3f      	ldr	r3, [pc, #252]	@ (800045c <lcd_char_cp+0x170>)
 800035e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000362:	611a      	str	r2, [r3, #16]
 if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000364:	79fb      	ldrb	r3, [r7, #7]
 8000366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800036a:	2b00      	cmp	r3, #0
 800036c:	d003      	beq.n	8000376 <lcd_char_cp+0x8a>
 800036e:	4b3b      	ldr	r3, [pc, #236]	@ (800045c <lcd_char_cp+0x170>)
 8000370:	2240      	movs	r2, #64	@ 0x40
 8000372:	611a      	str	r2, [r3, #16]
 8000374:	e003      	b.n	800037e <lcd_char_cp+0x92>
 8000376:	4b39      	ldr	r3, [pc, #228]	@ (800045c <lcd_char_cp+0x170>)
 8000378:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800037c:	611a      	str	r2, [r3, #16]
 if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 800037e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000382:	2b00      	cmp	r3, #0
 8000384:	da03      	bge.n	800038e <lcd_char_cp+0xa2>
 8000386:	4b35      	ldr	r3, [pc, #212]	@ (800045c <lcd_char_cp+0x170>)
 8000388:	2280      	movs	r2, #128	@ 0x80
 800038a:	611a      	str	r2, [r3, #16]
 800038c:	e003      	b.n	8000396 <lcd_char_cp+0xaa>
 800038e:	4b33      	ldr	r3, [pc, #204]	@ (800045c <lcd_char_cp+0x170>)
 8000390:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000394:	611a      	str	r2, [r3, #16]
 
 lcd_delay();
 8000396:	f7ff feea 	bl	800016e <lcd_delay>
 
 LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 800039a:	4b30      	ldr	r3, [pc, #192]	@ (800045c <lcd_char_cp+0x170>)
 800039c:	2202      	movs	r2, #2
 800039e:	615a      	str	r2, [r3, #20]
 LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80003a0:	4b2e      	ldr	r3, [pc, #184]	@ (800045c <lcd_char_cp+0x170>)
 80003a2:	2210      	movs	r2, #16
 80003a4:	615a      	str	r2, [r3, #20]
 LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80003a6:	4b2d      	ldr	r3, [pc, #180]	@ (800045c <lcd_char_cp+0x170>)
 80003a8:	2220      	movs	r2, #32
 80003aa:	615a      	str	r2, [r3, #20]
 LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 80003ac:	4b2b      	ldr	r3, [pc, #172]	@ (800045c <lcd_char_cp+0x170>)
 80003ae:	2240      	movs	r2, #64	@ 0x40
 80003b0:	615a      	str	r2, [r3, #20]
 LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80003b2:	4b2a      	ldr	r3, [pc, #168]	@ (800045c <lcd_char_cp+0x170>)
 80003b4:	2280      	movs	r2, #128	@ 0x80
 80003b6:	615a      	str	r2, [r3, #20]
 
 lcd_delay();
 80003b8:	f7ff fed9 	bl	800016e <lcd_delay>
 
 LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80003bc:	4b27      	ldr	r3, [pc, #156]	@ (800045c <lcd_char_cp+0x170>)
 80003be:	68db      	ldr	r3, [r3, #12]
 80003c0:	4a26      	ldr	r2, [pc, #152]	@ (800045c <lcd_char_cp+0x170>)
 80003c2:	f043 0302 	orr.w	r3, r3, #2
 80003c6:	60d3      	str	r3, [r2, #12]
 
 if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80003c8:	79fb      	ldrb	r3, [r7, #7]
 80003ca:	f003 0301 	and.w	r3, r3, #1
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d003      	beq.n	80003da <lcd_char_cp+0xee>
 80003d2:	4b22      	ldr	r3, [pc, #136]	@ (800045c <lcd_char_cp+0x170>)
 80003d4:	2210      	movs	r2, #16
 80003d6:	611a      	str	r2, [r3, #16]
 80003d8:	e003      	b.n	80003e2 <lcd_char_cp+0xf6>
 80003da:	4b20      	ldr	r3, [pc, #128]	@ (800045c <lcd_char_cp+0x170>)
 80003dc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80003e0:	611a      	str	r2, [r3, #16]
 if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	f003 0302 	and.w	r3, r3, #2
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d003      	beq.n	80003f4 <lcd_char_cp+0x108>
 80003ec:	4b1b      	ldr	r3, [pc, #108]	@ (800045c <lcd_char_cp+0x170>)
 80003ee:	2220      	movs	r2, #32
 80003f0:	611a      	str	r2, [r3, #16]
 80003f2:	e003      	b.n	80003fc <lcd_char_cp+0x110>
 80003f4:	4b19      	ldr	r3, [pc, #100]	@ (800045c <lcd_char_cp+0x170>)
 80003f6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80003fa:	611a      	str	r2, [r3, #16]
 if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	f003 0304 	and.w	r3, r3, #4
 8000402:	2b00      	cmp	r3, #0
 8000404:	d003      	beq.n	800040e <lcd_char_cp+0x122>
 8000406:	4b15      	ldr	r3, [pc, #84]	@ (800045c <lcd_char_cp+0x170>)
 8000408:	2240      	movs	r2, #64	@ 0x40
 800040a:	611a      	str	r2, [r3, #16]
 800040c:	e003      	b.n	8000416 <lcd_char_cp+0x12a>
 800040e:	4b13      	ldr	r3, [pc, #76]	@ (800045c <lcd_char_cp+0x170>)
 8000410:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000414:	611a      	str	r2, [r3, #16]
 if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	f003 0308 	and.w	r3, r3, #8
 800041c:	2b00      	cmp	r3, #0
 800041e:	d003      	beq.n	8000428 <lcd_char_cp+0x13c>
 8000420:	4b0e      	ldr	r3, [pc, #56]	@ (800045c <lcd_char_cp+0x170>)
 8000422:	2280      	movs	r2, #128	@ 0x80
 8000424:	611a      	str	r2, [r3, #16]
 8000426:	e003      	b.n	8000430 <lcd_char_cp+0x144>
 8000428:	4b0c      	ldr	r3, [pc, #48]	@ (800045c <lcd_char_cp+0x170>)
 800042a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800042e:	611a      	str	r2, [r3, #16]

 lcd_delay();
 8000430:	f7ff fe9d 	bl	800016e <lcd_delay>
 
 LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000434:	4b09      	ldr	r3, [pc, #36]	@ (800045c <lcd_char_cp+0x170>)
 8000436:	2202      	movs	r2, #2
 8000438:	615a      	str	r2, [r3, #20]
 LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 800043a:	4b08      	ldr	r3, [pc, #32]	@ (800045c <lcd_char_cp+0x170>)
 800043c:	2210      	movs	r2, #16
 800043e:	615a      	str	r2, [r3, #20]
 LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000440:	4b06      	ldr	r3, [pc, #24]	@ (800045c <lcd_char_cp+0x170>)
 8000442:	2220      	movs	r2, #32
 8000444:	615a      	str	r2, [r3, #20]
 LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000446:	4b05      	ldr	r3, [pc, #20]	@ (800045c <lcd_char_cp+0x170>)
 8000448:	2240      	movs	r2, #64	@ 0x40
 800044a:	615a      	str	r2, [r3, #20]
 LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 800044c:	4b03      	ldr	r3, [pc, #12]	@ (800045c <lcd_char_cp+0x170>)
 800044e:	2280      	movs	r2, #128	@ 0x80
 8000450:	615a      	str	r2, [r3, #20]
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40010800 	.word	0x40010800

08000460 <lcd_out_cp>:

void lcd_out_cp(char *out_char)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 while(*out_char)
 8000468:	e008      	b.n	800047c <lcd_out_cp+0x1c>
 {
  lcd_delay();
 800046a:	f7ff fe80 	bl	800016e <lcd_delay>
  lcd_char_cp(*out_char++);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	1c5a      	adds	r2, r3, #1
 8000472:	607a      	str	r2, [r7, #4]
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff ff38 	bl	80002ec <lcd_char_cp>
 while(*out_char)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d1f2      	bne.n	800046a <lcd_out_cp+0xa>
 }
 lcd_delay();
 8000484:	f7ff fe73 	bl	800016e <lcd_delay>
}
 8000488:	bf00      	nop
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}

08000490 <lcd_init>:


void lcd_init(char bits, char font, char lines)
{  
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	71fb      	strb	r3, [r7, #7]
 800049a:	460b      	mov	r3, r1
 800049c:	71bb      	strb	r3, [r7, #6]
 800049e:	4613      	mov	r3, r2
 80004a0:	717b      	strb	r3, [r7, #5]
    HAL_Delay(250);
 80004a2:	20fa      	movs	r0, #250	@ 0xfa
 80004a4:	f000 fa62 	bl	800096c <HAL_Delay>
 lcd_cmd(_RETURN_HOME);
 80004a8:	2002      	movs	r0, #2
 80004aa:	f7ff fe69 	bl	8000180 <lcd_cmd>
    HAL_Delay(50);
 80004ae:	2032      	movs	r0, #50	@ 0x32
 80004b0:	f000 fa5c 	bl	800096c <HAL_Delay>
    lcd_cmd(0x20 | bits | font | lines);
 80004b4:	79fa      	ldrb	r2, [r7, #7]
 80004b6:	79bb      	ldrb	r3, [r7, #6]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	b2da      	uxtb	r2, r3
 80004bc:	797b      	ldrb	r3, [r7, #5]
 80004be:	4313      	orrs	r3, r2
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	f043 0320 	orr.w	r3, r3, #32
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff fe59 	bl	8000180 <lcd_cmd>
    HAL_Delay(50);
 80004ce:	2032      	movs	r0, #50	@ 0x32
 80004d0:	f000 fa4c 	bl	800096c <HAL_Delay>
    lcd_cmd(_LCD_INIT);
 80004d4:	2006      	movs	r0, #6
 80004d6:	f7ff fe53 	bl	8000180 <lcd_cmd>
    HAL_Delay(50);
 80004da:	2032      	movs	r0, #50	@ 0x32
 80004dc:	f000 fa46 	bl	800096c <HAL_Delay>
    lcd_cmd(0x0E);
 80004e0:	200e      	movs	r0, #14
 80004e2:	f7ff fe4d 	bl	8000180 <lcd_cmd>
    HAL_Delay(50);
 80004e6:	2032      	movs	r0, #50	@ 0x32
 80004e8:	f000 fa40 	bl	800096c <HAL_Delay>
    lcd_cmd(0x0C);
 80004ec:	200c      	movs	r0, #12
 80004ee:	f7ff fe47 	bl	8000180 <lcd_cmd>
    HAL_Delay(50);
 80004f2:	2032      	movs	r0, #50	@ 0x32
 80004f4:	f000 fa3a 	bl	800096c <HAL_Delay>
    lcd_cmd(0x01);
 80004f8:	2001      	movs	r0, #1
 80004fa:	f7ff fe41 	bl	8000180 <lcd_cmd>
    HAL_Delay(100);
 80004fe:	2064      	movs	r0, #100	@ 0x64
 8000500:	f000 fa34 	bl	800096c <HAL_Delay>
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{ 
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	460a      	mov	r2, r1
 8000516:	71fb      	strb	r3, [r7, #7]
 8000518:	4613      	mov	r3, r2
 800051a:	71bb      	strb	r3, [r7, #6]
 if(row == 1)
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	2b01      	cmp	r3, #1
 8000520:	d106      	bne.n	8000530 <lcd_gotoxy+0x24>
 {
  lcd_cmd(0x80 + (column - 1));
 8000522:	79bb      	ldrb	r3, [r7, #6]
 8000524:	337f      	adds	r3, #127	@ 0x7f
 8000526:	b2db      	uxtb	r3, r3
 8000528:	4618      	mov	r0, r3
 800052a:	f7ff fe29 	bl	8000180 <lcd_cmd>
 }
 else if(row == 2)
 {
  lcd_cmd(0xC0 + (column - 1));
 } 
}
 800052e:	e008      	b.n	8000542 <lcd_gotoxy+0x36>
 else if(row == 2)
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	2b02      	cmp	r3, #2
 8000534:	d105      	bne.n	8000542 <lcd_gotoxy+0x36>
  lcd_cmd(0xC0 + (column - 1));
 8000536:	79bb      	ldrb	r3, [r7, #6]
 8000538:	3b41      	subs	r3, #65	@ 0x41
 800053a:	b2db      	uxtb	r3, r3
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff fe1f 	bl	8000180 <lcd_cmd>
}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}

0800054a <lcd_print>:
 lcd_gotoxy(row, column);
 lcd_char_cp(out_char);
}

void lcd_print(unsigned char row, unsigned char column, char *out_char)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	b082      	sub	sp, #8
 800054e:	af00      	add	r7, sp, #0
 8000550:	4603      	mov	r3, r0
 8000552:	603a      	str	r2, [r7, #0]
 8000554:	71fb      	strb	r3, [r7, #7]
 8000556:	460b      	mov	r3, r1
 8000558:	71bb      	strb	r3, [r7, #6]
 lcd_gotoxy(row, column);
 800055a:	79ba      	ldrb	r2, [r7, #6]
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	4611      	mov	r1, r2
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff ffd3 	bl	800050c <lcd_gotoxy>
 lcd_out_cp(out_char);
 8000566:	6838      	ldr	r0, [r7, #0]
 8000568:	f7ff ff7a 	bl	8000460 <lcd_out_cp>
}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <lcd_clear>:
void lcd_clear(void) {
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
    
 lcd_cmd(_CLEAR);
 8000578:	2001      	movs	r0, #1
 800057a:	f7ff fe01 	bl	8000180 <lcd_cmd>
    HAL_Delay(2);
 800057e:	2002      	movs	r0, #2
 8000580:	f000 f9f4 	bl	800096c <HAL_Delay>
    
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	@ 0x28
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 f98b 	bl	80008a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f845 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 f883 	bl	80006a0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
lcd_init(_LCD_4BIT, _LCD_FONT_5x8, _LCD_2LINE);
 800059a:	2208      	movs	r2, #8
 800059c:	2100      	movs	r1, #0
 800059e:	2000      	movs	r0, #0
 80005a0:	f7ff ff76 	bl	8000490 <lcd_init>
lcd_print(1,1,"LCD DRIVER");
 80005a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000614 <main+0x8c>)
 80005a6:	2101      	movs	r1, #1
 80005a8:	2001      	movs	r0, #1
 80005aa:	f7ff ffce 	bl	800054a <lcd_print>
HAL_Delay(1000);
 80005ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005b2:	f000 f9db 	bl	800096c <HAL_Delay>
lcd_print(2,1,"TEST APP");
 80005b6:	4a18      	ldr	r2, [pc, #96]	@ (8000618 <main+0x90>)
 80005b8:	2101      	movs	r1, #1
 80005ba:	2002      	movs	r0, #2
 80005bc:	f7ff ffc5 	bl	800054a <lcd_print>

int i=0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	627b      	str	r3, [r7, #36]	@ 0x24
char yazi[32]= "  ";
 80005c4:	f242 0320 	movw	r3, #8224	@ 0x2020
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	f107 0308 	add.w	r3, r7, #8
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]
 80005da:	615a      	str	r2, [r3, #20]
 80005dc:	619a      	str	r2, [r3, #24]
HAL_Delay(1000);
 80005de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005e2:	f000 f9c3 	bl	800096c <HAL_Delay>
lcd_clear();
 80005e6:	f7ff ffc5 	bl	8000574 <lcd_clear>

    /* USER CODE END WHILE */


    /* USER CODE BEGIN 3 */
	  i++;
 80005ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005ec:	3301      	adds	r3, #1
 80005ee:	627b      	str	r3, [r7, #36]	@ 0x24
	  sprintf(yazi,"%d",i);
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005f4:	4909      	ldr	r1, [pc, #36]	@ (800061c <main+0x94>)
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 f83a 	bl	8001670 <siprintf>
	  lcd_print(1,1,yazi);
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	461a      	mov	r2, r3
 8000600:	2101      	movs	r1, #1
 8000602:	2001      	movs	r0, #1
 8000604:	f7ff ffa1 	bl	800054a <lcd_print>
	  HAL_Delay(200);
 8000608:	20c8      	movs	r0, #200	@ 0xc8
 800060a:	f000 f9af 	bl	800096c <HAL_Delay>
	  i++;
 800060e:	bf00      	nop
 8000610:	e7eb      	b.n	80005ea <main+0x62>
 8000612:	bf00      	nop
 8000614:	08001fe8 	.word	0x08001fe8
 8000618:	08001ff4 	.word	0x08001ff4
 800061c:	08002000 	.word	0x08002000

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b090      	sub	sp, #64	@ 0x40
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0318 	add.w	r3, r7, #24
 800062a:	2228      	movs	r2, #40	@ 0x28
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f001 f840 	bl	80016b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000642:	2302      	movs	r3, #2
 8000644:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000646:	2301      	movs	r3, #1
 8000648:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064a:	2310      	movs	r3, #16
 800064c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000652:	2300      	movs	r3, #0
 8000654:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000656:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 800065a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 0318 	add.w	r3, r7, #24
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fc27 	bl	8000eb4 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800066c:	f000 f856 	bl	800071c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000674:	2302      	movs	r3, #2
 8000676:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2101      	movs	r1, #1
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fe95 	bl	80013b8 <HAL_RCC_ClockConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000694:	f000 f842 	bl	800071c <Error_Handler>
  }
}
 8000698:	bf00      	nop
 800069a:	3740      	adds	r7, #64	@ 0x40
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	f107 0308 	add.w	r3, r7, #8
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b4:	4b17      	ldr	r3, [pc, #92]	@ (8000714 <MX_GPIO_Init+0x74>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	4a16      	ldr	r2, [pc, #88]	@ (8000714 <MX_GPIO_Init+0x74>)
 80006ba:	f043 0320 	orr.w	r3, r3, #32
 80006be:	6193      	str	r3, [r2, #24]
 80006c0:	4b14      	ldr	r3, [pc, #80]	@ (8000714 <MX_GPIO_Init+0x74>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f003 0320 	and.w	r3, r3, #32
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006cc:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <MX_GPIO_Init+0x74>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a10      	ldr	r2, [pc, #64]	@ (8000714 <MX_GPIO_Init+0x74>)
 80006d2:	f043 0304 	orr.w	r3, r3, #4
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <MX_GPIO_Init+0x74>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f003 0304 	and.w	r3, r3, #4
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_EN_Pin|LCD_RS_Pin|LCD_D4_Pin|LCD_D5_Pin
 80006e4:	2200      	movs	r2, #0
 80006e6:	21f6      	movs	r1, #246	@ 0xf6
 80006e8:	480b      	ldr	r0, [pc, #44]	@ (8000718 <MX_GPIO_Init+0x78>)
 80006ea:	f000 fbcb 	bl	8000e84 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_EN_Pin LCD_RS_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_RS_Pin|LCD_D4_Pin|LCD_D5_Pin
 80006ee:	23f6      	movs	r3, #246	@ 0xf6
 80006f0:	60bb      	str	r3, [r7, #8]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2302      	movs	r3, #2
 80006fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	4619      	mov	r1, r3
 8000704:	4804      	ldr	r0, [pc, #16]	@ (8000718 <MX_GPIO_Init+0x78>)
 8000706:	f000 fa39 	bl	8000b7c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800070a:	bf00      	nop
 800070c:	3718      	adds	r7, #24
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000
 8000718:	40010800 	.word	0x40010800

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <Error_Handler+0x8>

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800072e:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <HAL_MspInit+0x5c>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	4a14      	ldr	r2, [pc, #80]	@ (8000784 <HAL_MspInit+0x5c>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6193      	str	r3, [r2, #24]
 800073a:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <HAL_MspInit+0x5c>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <HAL_MspInit+0x5c>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	4a0e      	ldr	r2, [pc, #56]	@ (8000784 <HAL_MspInit+0x5c>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000750:	61d3      	str	r3, [r2, #28]
 8000752:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <HAL_MspInit+0x5c>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800075e:	4b0a      	ldr	r3, [pc, #40]	@ (8000788 <HAL_MspInit+0x60>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	4a04      	ldr	r2, [pc, #16]	@ (8000788 <HAL_MspInit+0x60>)
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077a:	bf00      	nop
 800077c:	3714      	adds	r7, #20
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	40021000 	.word	0x40021000
 8000788:	40010000 	.word	0x40010000

0800078c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <NMI_Handler+0x4>

08000794 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <HardFault_Handler+0x4>

0800079c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <MemManage_Handler+0x4>

080007a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <BusFault_Handler+0x4>

080007ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <UsageFault_Handler+0x4>

080007b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr

080007c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr

080007cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr

080007d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007dc:	f000 f8aa 	bl	8000934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007ec:	4a14      	ldr	r2, [pc, #80]	@ (8000840 <_sbrk+0x5c>)
 80007ee:	4b15      	ldr	r3, [pc, #84]	@ (8000844 <_sbrk+0x60>)
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007f8:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <_sbrk+0x64>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d102      	bne.n	8000806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000800:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <_sbrk+0x64>)
 8000802:	4a12      	ldr	r2, [pc, #72]	@ (800084c <_sbrk+0x68>)
 8000804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000806:	4b10      	ldr	r3, [pc, #64]	@ (8000848 <_sbrk+0x64>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4413      	add	r3, r2
 800080e:	693a      	ldr	r2, [r7, #16]
 8000810:	429a      	cmp	r2, r3
 8000812:	d207      	bcs.n	8000824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000814:	f000 ff56 	bl	80016c4 <__errno>
 8000818:	4603      	mov	r3, r0
 800081a:	220c      	movs	r2, #12
 800081c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800081e:	f04f 33ff 	mov.w	r3, #4294967295
 8000822:	e009      	b.n	8000838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000824:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <_sbrk+0x64>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800082a:	4b07      	ldr	r3, [pc, #28]	@ (8000848 <_sbrk+0x64>)
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4413      	add	r3, r2
 8000832:	4a05      	ldr	r2, [pc, #20]	@ (8000848 <_sbrk+0x64>)
 8000834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000836:	68fb      	ldr	r3, [r7, #12]
}
 8000838:	4618      	mov	r0, r3
 800083a:	3718      	adds	r7, #24
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20005000 	.word	0x20005000
 8000844:	00000400 	.word	0x00000400
 8000848:	20000078 	.word	0x20000078
 800084c:	200001c8 	.word	0x200001c8

08000850 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr

0800085c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800085c:	f7ff fff8 	bl	8000850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000860:	480b      	ldr	r0, [pc, #44]	@ (8000890 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000862:	490c      	ldr	r1, [pc, #48]	@ (8000894 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000864:	4a0c      	ldr	r2, [pc, #48]	@ (8000898 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000868:	e002      	b.n	8000870 <LoopCopyDataInit>

0800086a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800086c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086e:	3304      	adds	r3, #4

08000870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000874:	d3f9      	bcc.n	800086a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000876:	4a09      	ldr	r2, [pc, #36]	@ (800089c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000878:	4c09      	ldr	r4, [pc, #36]	@ (80008a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800087c:	e001      	b.n	8000882 <LoopFillZerobss>

0800087e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000880:	3204      	adds	r2, #4

08000882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000884:	d3fb      	bcc.n	800087e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000886:	f000 ff23 	bl	80016d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800088a:	f7ff fe7d 	bl	8000588 <main>
  bx lr
 800088e:	4770      	bx	lr
  ldr r0, =_sdata
 8000890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000894:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000898:	08002064 	.word	0x08002064
  ldr r2, =_sbss
 800089c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80008a0:	200001c8 	.word	0x200001c8

080008a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a4:	e7fe      	b.n	80008a4 <ADC1_2_IRQHandler>
	...

080008a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ac:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <HAL_Init+0x28>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a07      	ldr	r2, [pc, #28]	@ (80008d0 <HAL_Init+0x28>)
 80008b2:	f043 0310 	orr.w	r3, r3, #16
 80008b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b8:	2003      	movs	r0, #3
 80008ba:	f000 f92b 	bl	8000b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008be:	200f      	movs	r0, #15
 80008c0:	f000 f808 	bl	80008d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c4:	f7ff ff30 	bl	8000728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40022000 	.word	0x40022000

080008d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008dc:	4b12      	ldr	r3, [pc, #72]	@ (8000928 <HAL_InitTick+0x54>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b12      	ldr	r3, [pc, #72]	@ (800092c <HAL_InitTick+0x58>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f935 	bl	8000b62 <HAL_SYSTICK_Config>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e00e      	b.n	8000920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b0f      	cmp	r3, #15
 8000906:	d80a      	bhi.n	800091e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000908:	2200      	movs	r2, #0
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	f04f 30ff 	mov.w	r0, #4294967295
 8000910:	f000 f90b 	bl	8000b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000914:	4a06      	ldr	r2, [pc, #24]	@ (8000930 <HAL_InitTick+0x5c>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800091a:	2300      	movs	r3, #0
 800091c:	e000      	b.n	8000920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
}
 8000920:	4618      	mov	r0, r3
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000000 	.word	0x20000000
 800092c:	20000008 	.word	0x20000008
 8000930:	20000004 	.word	0x20000004

08000934 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000938:	4b05      	ldr	r3, [pc, #20]	@ (8000950 <HAL_IncTick+0x1c>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	4b05      	ldr	r3, [pc, #20]	@ (8000954 <HAL_IncTick+0x20>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4413      	add	r3, r2
 8000944:	4a03      	ldr	r2, [pc, #12]	@ (8000954 <HAL_IncTick+0x20>)
 8000946:	6013      	str	r3, [r2, #0]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	20000008 	.word	0x20000008
 8000954:	2000007c 	.word	0x2000007c

08000958 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return uwTick;
 800095c:	4b02      	ldr	r3, [pc, #8]	@ (8000968 <HAL_GetTick+0x10>)
 800095e:	681b      	ldr	r3, [r3, #0]
}
 8000960:	4618      	mov	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	2000007c 	.word	0x2000007c

0800096c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000974:	f7ff fff0 	bl	8000958 <HAL_GetTick>
 8000978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000984:	d005      	beq.n	8000992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000986:	4b0a      	ldr	r3, [pc, #40]	@ (80009b0 <HAL_Delay+0x44>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	461a      	mov	r2, r3
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	4413      	add	r3, r2
 8000990:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000992:	bf00      	nop
 8000994:	f7ff ffe0 	bl	8000958 <HAL_GetTick>
 8000998:	4602      	mov	r2, r0
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d8f7      	bhi.n	8000994 <HAL_Delay+0x28>
  {
  }
}
 80009a4:	bf00      	nop
 80009a6:	bf00      	nop
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000008 	.word	0x20000008

080009b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c4:	4b0c      	ldr	r3, [pc, #48]	@ (80009f8 <__NVIC_SetPriorityGrouping+0x44>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009d0:	4013      	ands	r3, r2
 80009d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e6:	4a04      	ldr	r2, [pc, #16]	@ (80009f8 <__NVIC_SetPriorityGrouping+0x44>)
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	60d3      	str	r3, [r2, #12]
}
 80009ec:	bf00      	nop
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a00:	4b04      	ldr	r3, [pc, #16]	@ (8000a14 <__NVIC_GetPriorityGrouping+0x18>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	0a1b      	lsrs	r3, r3, #8
 8000a06:	f003 0307 	and.w	r3, r3, #7
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	6039      	str	r1, [r7, #0]
 8000a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	db0a      	blt.n	8000a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	490c      	ldr	r1, [pc, #48]	@ (8000a64 <__NVIC_SetPriority+0x4c>)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	0112      	lsls	r2, r2, #4
 8000a38:	b2d2      	uxtb	r2, r2
 8000a3a:	440b      	add	r3, r1
 8000a3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a40:	e00a      	b.n	8000a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4908      	ldr	r1, [pc, #32]	@ (8000a68 <__NVIC_SetPriority+0x50>)
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	f003 030f 	and.w	r3, r3, #15
 8000a4e:	3b04      	subs	r3, #4
 8000a50:	0112      	lsls	r2, r2, #4
 8000a52:	b2d2      	uxtb	r2, r2
 8000a54:	440b      	add	r3, r1
 8000a56:	761a      	strb	r2, [r3, #24]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000e100 	.word	0xe000e100
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b089      	sub	sp, #36	@ 0x24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	f1c3 0307 	rsb	r3, r3, #7
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	bf28      	it	cs
 8000a8a:	2304      	movcs	r3, #4
 8000a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3304      	adds	r3, #4
 8000a92:	2b06      	cmp	r3, #6
 8000a94:	d902      	bls.n	8000a9c <NVIC_EncodePriority+0x30>
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3b03      	subs	r3, #3
 8000a9a:	e000      	b.n	8000a9e <NVIC_EncodePriority+0x32>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43da      	mvns	r2, r3
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	401a      	ands	r2, r3
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	fa01 f303 	lsl.w	r3, r1, r3
 8000abe:	43d9      	mvns	r1, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	4313      	orrs	r3, r2
         );
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3724      	adds	r7, #36	@ 0x24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ae0:	d301      	bcc.n	8000ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00f      	b.n	8000b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b10 <SysTick_Config+0x40>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aee:	210f      	movs	r1, #15
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f7ff ff90 	bl	8000a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af8:	4b05      	ldr	r3, [pc, #20]	@ (8000b10 <SysTick_Config+0x40>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afe:	4b04      	ldr	r3, [pc, #16]	@ (8000b10 <SysTick_Config+0x40>)
 8000b00:	2207      	movs	r2, #7
 8000b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	e000e010 	.word	0xe000e010

08000b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ff49 	bl	80009b4 <__NVIC_SetPriorityGrouping>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b086      	sub	sp, #24
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4603      	mov	r3, r0
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
 8000b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b3c:	f7ff ff5e 	bl	80009fc <__NVIC_GetPriorityGrouping>
 8000b40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	68b9      	ldr	r1, [r7, #8]
 8000b46:	6978      	ldr	r0, [r7, #20]
 8000b48:	f7ff ff90 	bl	8000a6c <NVIC_EncodePriority>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b52:	4611      	mov	r1, r2
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff5f 	bl	8000a18 <__NVIC_SetPriority>
}
 8000b5a:	bf00      	nop
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff ffb0 	bl	8000ad0 <SysTick_Config>
 8000b70:	4603      	mov	r3, r0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b08b      	sub	sp, #44	@ 0x2c
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b8e:	e169      	b.n	8000e64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b90:	2201      	movs	r2, #1
 8000b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	69fa      	ldr	r2, [r7, #28]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ba4:	69ba      	ldr	r2, [r7, #24]
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	f040 8158 	bne.w	8000e5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	4a9a      	ldr	r2, [pc, #616]	@ (8000e1c <HAL_GPIO_Init+0x2a0>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d05e      	beq.n	8000c76 <HAL_GPIO_Init+0xfa>
 8000bb8:	4a98      	ldr	r2, [pc, #608]	@ (8000e1c <HAL_GPIO_Init+0x2a0>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d875      	bhi.n	8000caa <HAL_GPIO_Init+0x12e>
 8000bbe:	4a98      	ldr	r2, [pc, #608]	@ (8000e20 <HAL_GPIO_Init+0x2a4>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d058      	beq.n	8000c76 <HAL_GPIO_Init+0xfa>
 8000bc4:	4a96      	ldr	r2, [pc, #600]	@ (8000e20 <HAL_GPIO_Init+0x2a4>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d86f      	bhi.n	8000caa <HAL_GPIO_Init+0x12e>
 8000bca:	4a96      	ldr	r2, [pc, #600]	@ (8000e24 <HAL_GPIO_Init+0x2a8>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d052      	beq.n	8000c76 <HAL_GPIO_Init+0xfa>
 8000bd0:	4a94      	ldr	r2, [pc, #592]	@ (8000e24 <HAL_GPIO_Init+0x2a8>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d869      	bhi.n	8000caa <HAL_GPIO_Init+0x12e>
 8000bd6:	4a94      	ldr	r2, [pc, #592]	@ (8000e28 <HAL_GPIO_Init+0x2ac>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d04c      	beq.n	8000c76 <HAL_GPIO_Init+0xfa>
 8000bdc:	4a92      	ldr	r2, [pc, #584]	@ (8000e28 <HAL_GPIO_Init+0x2ac>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d863      	bhi.n	8000caa <HAL_GPIO_Init+0x12e>
 8000be2:	4a92      	ldr	r2, [pc, #584]	@ (8000e2c <HAL_GPIO_Init+0x2b0>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d046      	beq.n	8000c76 <HAL_GPIO_Init+0xfa>
 8000be8:	4a90      	ldr	r2, [pc, #576]	@ (8000e2c <HAL_GPIO_Init+0x2b0>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d85d      	bhi.n	8000caa <HAL_GPIO_Init+0x12e>
 8000bee:	2b12      	cmp	r3, #18
 8000bf0:	d82a      	bhi.n	8000c48 <HAL_GPIO_Init+0xcc>
 8000bf2:	2b12      	cmp	r3, #18
 8000bf4:	d859      	bhi.n	8000caa <HAL_GPIO_Init+0x12e>
 8000bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8000bfc <HAL_GPIO_Init+0x80>)
 8000bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bfc:	08000c77 	.word	0x08000c77
 8000c00:	08000c51 	.word	0x08000c51
 8000c04:	08000c63 	.word	0x08000c63
 8000c08:	08000ca5 	.word	0x08000ca5
 8000c0c:	08000cab 	.word	0x08000cab
 8000c10:	08000cab 	.word	0x08000cab
 8000c14:	08000cab 	.word	0x08000cab
 8000c18:	08000cab 	.word	0x08000cab
 8000c1c:	08000cab 	.word	0x08000cab
 8000c20:	08000cab 	.word	0x08000cab
 8000c24:	08000cab 	.word	0x08000cab
 8000c28:	08000cab 	.word	0x08000cab
 8000c2c:	08000cab 	.word	0x08000cab
 8000c30:	08000cab 	.word	0x08000cab
 8000c34:	08000cab 	.word	0x08000cab
 8000c38:	08000cab 	.word	0x08000cab
 8000c3c:	08000cab 	.word	0x08000cab
 8000c40:	08000c59 	.word	0x08000c59
 8000c44:	08000c6d 	.word	0x08000c6d
 8000c48:	4a79      	ldr	r2, [pc, #484]	@ (8000e30 <HAL_GPIO_Init+0x2b4>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d013      	beq.n	8000c76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c4e:	e02c      	b.n	8000caa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	623b      	str	r3, [r7, #32]
          break;
 8000c56:	e029      	b.n	8000cac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	623b      	str	r3, [r7, #32]
          break;
 8000c60:	e024      	b.n	8000cac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	3308      	adds	r3, #8
 8000c68:	623b      	str	r3, [r7, #32]
          break;
 8000c6a:	e01f      	b.n	8000cac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	330c      	adds	r3, #12
 8000c72:	623b      	str	r3, [r7, #32]
          break;
 8000c74:	e01a      	b.n	8000cac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d102      	bne.n	8000c84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c7e:	2304      	movs	r3, #4
 8000c80:	623b      	str	r3, [r7, #32]
          break;
 8000c82:	e013      	b.n	8000cac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d105      	bne.n	8000c98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c8c:	2308      	movs	r3, #8
 8000c8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	69fa      	ldr	r2, [r7, #28]
 8000c94:	611a      	str	r2, [r3, #16]
          break;
 8000c96:	e009      	b.n	8000cac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c98:	2308      	movs	r3, #8
 8000c9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	69fa      	ldr	r2, [r7, #28]
 8000ca0:	615a      	str	r2, [r3, #20]
          break;
 8000ca2:	e003      	b.n	8000cac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	623b      	str	r3, [r7, #32]
          break;
 8000ca8:	e000      	b.n	8000cac <HAL_GPIO_Init+0x130>
          break;
 8000caa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	2bff      	cmp	r3, #255	@ 0xff
 8000cb0:	d801      	bhi.n	8000cb6 <HAL_GPIO_Init+0x13a>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	e001      	b.n	8000cba <HAL_GPIO_Init+0x13e>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	2bff      	cmp	r3, #255	@ 0xff
 8000cc0:	d802      	bhi.n	8000cc8 <HAL_GPIO_Init+0x14c>
 8000cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	e002      	b.n	8000cce <HAL_GPIO_Init+0x152>
 8000cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cca:	3b08      	subs	r3, #8
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	210f      	movs	r1, #15
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	401a      	ands	r2, r3
 8000ce0:	6a39      	ldr	r1, [r7, #32]
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce8:	431a      	orrs	r2, r3
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f000 80b1 	beq.w	8000e5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cfc:	4b4d      	ldr	r3, [pc, #308]	@ (8000e34 <HAL_GPIO_Init+0x2b8>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a4c      	ldr	r2, [pc, #304]	@ (8000e34 <HAL_GPIO_Init+0x2b8>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b4a      	ldr	r3, [pc, #296]	@ (8000e34 <HAL_GPIO_Init+0x2b8>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d14:	4a48      	ldr	r2, [pc, #288]	@ (8000e38 <HAL_GPIO_Init+0x2bc>)
 8000d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d18:	089b      	lsrs	r3, r3, #2
 8000d1a:	3302      	adds	r3, #2
 8000d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d24:	f003 0303 	and.w	r3, r3, #3
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	220f      	movs	r2, #15
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	4013      	ands	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a40      	ldr	r2, [pc, #256]	@ (8000e3c <HAL_GPIO_Init+0x2c0>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d013      	beq.n	8000d68 <HAL_GPIO_Init+0x1ec>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a3f      	ldr	r2, [pc, #252]	@ (8000e40 <HAL_GPIO_Init+0x2c4>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d00d      	beq.n	8000d64 <HAL_GPIO_Init+0x1e8>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a3e      	ldr	r2, [pc, #248]	@ (8000e44 <HAL_GPIO_Init+0x2c8>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d007      	beq.n	8000d60 <HAL_GPIO_Init+0x1e4>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a3d      	ldr	r2, [pc, #244]	@ (8000e48 <HAL_GPIO_Init+0x2cc>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d101      	bne.n	8000d5c <HAL_GPIO_Init+0x1e0>
 8000d58:	2303      	movs	r3, #3
 8000d5a:	e006      	b.n	8000d6a <HAL_GPIO_Init+0x1ee>
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	e004      	b.n	8000d6a <HAL_GPIO_Init+0x1ee>
 8000d60:	2302      	movs	r3, #2
 8000d62:	e002      	b.n	8000d6a <HAL_GPIO_Init+0x1ee>
 8000d64:	2301      	movs	r3, #1
 8000d66:	e000      	b.n	8000d6a <HAL_GPIO_Init+0x1ee>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d6c:	f002 0203 	and.w	r2, r2, #3
 8000d70:	0092      	lsls	r2, r2, #2
 8000d72:	4093      	lsls	r3, r2
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d7a:	492f      	ldr	r1, [pc, #188]	@ (8000e38 <HAL_GPIO_Init+0x2bc>)
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d7e:	089b      	lsrs	r3, r3, #2
 8000d80:	3302      	adds	r3, #2
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d006      	beq.n	8000da2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d94:	4b2d      	ldr	r3, [pc, #180]	@ (8000e4c <HAL_GPIO_Init+0x2d0>)
 8000d96:	689a      	ldr	r2, [r3, #8]
 8000d98:	492c      	ldr	r1, [pc, #176]	@ (8000e4c <HAL_GPIO_Init+0x2d0>)
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	608b      	str	r3, [r1, #8]
 8000da0:	e006      	b.n	8000db0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000da2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e4c <HAL_GPIO_Init+0x2d0>)
 8000da4:	689a      	ldr	r2, [r3, #8]
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	4928      	ldr	r1, [pc, #160]	@ (8000e4c <HAL_GPIO_Init+0x2d0>)
 8000dac:	4013      	ands	r3, r2
 8000dae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d006      	beq.n	8000dca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dbc:	4b23      	ldr	r3, [pc, #140]	@ (8000e4c <HAL_GPIO_Init+0x2d0>)
 8000dbe:	68da      	ldr	r2, [r3, #12]
 8000dc0:	4922      	ldr	r1, [pc, #136]	@ (8000e4c <HAL_GPIO_Init+0x2d0>)
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	60cb      	str	r3, [r1, #12]
 8000dc8:	e006      	b.n	8000dd8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dca:	4b20      	ldr	r3, [pc, #128]	@ (8000e4c <HAL_GPIO_Init+0x2d0>)
 8000dcc:	68da      	ldr	r2, [r3, #12]
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	491e      	ldr	r1, [pc, #120]	@ (8000e4c <HAL_GPIO_Init+0x2d0>)
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d006      	beq.n	8000df2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000de4:	4b19      	ldr	r3, [pc, #100]	@ (8000e4c <HAL_GPIO_Init+0x2d0>)
 8000de6:	685a      	ldr	r2, [r3, #4]
 8000de8:	4918      	ldr	r1, [pc, #96]	@ (8000e4c <HAL_GPIO_Init+0x2d0>)
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	604b      	str	r3, [r1, #4]
 8000df0:	e006      	b.n	8000e00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000df2:	4b16      	ldr	r3, [pc, #88]	@ (8000e4c <HAL_GPIO_Init+0x2d0>)
 8000df4:	685a      	ldr	r2, [r3, #4]
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	4914      	ldr	r1, [pc, #80]	@ (8000e4c <HAL_GPIO_Init+0x2d0>)
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d021      	beq.n	8000e50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <HAL_GPIO_Init+0x2d0>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	490e      	ldr	r1, [pc, #56]	@ (8000e4c <HAL_GPIO_Init+0x2d0>)
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	600b      	str	r3, [r1, #0]
 8000e18:	e021      	b.n	8000e5e <HAL_GPIO_Init+0x2e2>
 8000e1a:	bf00      	nop
 8000e1c:	10320000 	.word	0x10320000
 8000e20:	10310000 	.word	0x10310000
 8000e24:	10220000 	.word	0x10220000
 8000e28:	10210000 	.word	0x10210000
 8000e2c:	10120000 	.word	0x10120000
 8000e30:	10110000 	.word	0x10110000
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40010000 	.word	0x40010000
 8000e3c:	40010800 	.word	0x40010800
 8000e40:	40010c00 	.word	0x40010c00
 8000e44:	40011000 	.word	0x40011000
 8000e48:	40011400 	.word	0x40011400
 8000e4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e50:	4b0b      	ldr	r3, [pc, #44]	@ (8000e80 <HAL_GPIO_Init+0x304>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	43db      	mvns	r3, r3
 8000e58:	4909      	ldr	r1, [pc, #36]	@ (8000e80 <HAL_GPIO_Init+0x304>)
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e60:	3301      	adds	r3, #1
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f47f ae8e 	bne.w	8000b90 <HAL_GPIO_Init+0x14>
  }
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	372c      	adds	r7, #44	@ 0x2c
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr
 8000e80:	40010400 	.word	0x40010400

08000e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	807b      	strh	r3, [r7, #2]
 8000e90:	4613      	mov	r3, r2
 8000e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e94:	787b      	ldrb	r3, [r7, #1]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e9a:	887a      	ldrh	r2, [r7, #2]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ea0:	e003      	b.n	8000eaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ea2:	887b      	ldrh	r3, [r7, #2]
 8000ea4:	041a      	lsls	r2, r3, #16
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	611a      	str	r2, [r3, #16]
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e272      	b.n	80013ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f000 8087 	beq.w	8000fe2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ed4:	4b92      	ldr	r3, [pc, #584]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 030c 	and.w	r3, r3, #12
 8000edc:	2b04      	cmp	r3, #4
 8000ede:	d00c      	beq.n	8000efa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ee0:	4b8f      	ldr	r3, [pc, #572]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 030c 	and.w	r3, r3, #12
 8000ee8:	2b08      	cmp	r3, #8
 8000eea:	d112      	bne.n	8000f12 <HAL_RCC_OscConfig+0x5e>
 8000eec:	4b8c      	ldr	r3, [pc, #560]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ef8:	d10b      	bne.n	8000f12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000efa:	4b89      	ldr	r3, [pc, #548]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d06c      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x12c>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d168      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e24c      	b.n	80013ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f1a:	d106      	bne.n	8000f2a <HAL_RCC_OscConfig+0x76>
 8000f1c:	4b80      	ldr	r3, [pc, #512]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a7f      	ldr	r2, [pc, #508]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 8000f22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	e02e      	b.n	8000f88 <HAL_RCC_OscConfig+0xd4>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d10c      	bne.n	8000f4c <HAL_RCC_OscConfig+0x98>
 8000f32:	4b7b      	ldr	r3, [pc, #492]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a7a      	ldr	r2, [pc, #488]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 8000f38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	4b78      	ldr	r3, [pc, #480]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a77      	ldr	r2, [pc, #476]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 8000f44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f48:	6013      	str	r3, [r2, #0]
 8000f4a:	e01d      	b.n	8000f88 <HAL_RCC_OscConfig+0xd4>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f54:	d10c      	bne.n	8000f70 <HAL_RCC_OscConfig+0xbc>
 8000f56:	4b72      	ldr	r3, [pc, #456]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a71      	ldr	r2, [pc, #452]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	4b6f      	ldr	r3, [pc, #444]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a6e      	ldr	r2, [pc, #440]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 8000f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	e00b      	b.n	8000f88 <HAL_RCC_OscConfig+0xd4>
 8000f70:	4b6b      	ldr	r3, [pc, #428]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a6a      	ldr	r2, [pc, #424]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 8000f76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f7a:	6013      	str	r3, [r2, #0]
 8000f7c:	4b68      	ldr	r3, [pc, #416]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a67      	ldr	r2, [pc, #412]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 8000f82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d013      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f90:	f7ff fce2 	bl	8000958 <HAL_GetTick>
 8000f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f96:	e008      	b.n	8000faa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f98:	f7ff fcde 	bl	8000958 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b64      	cmp	r3, #100	@ 0x64
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e200      	b.n	80013ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000faa:	4b5d      	ldr	r3, [pc, #372]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0f0      	beq.n	8000f98 <HAL_RCC_OscConfig+0xe4>
 8000fb6:	e014      	b.n	8000fe2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb8:	f7ff fcce 	bl	8000958 <HAL_GetTick>
 8000fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fbe:	e008      	b.n	8000fd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fc0:	f7ff fcca 	bl	8000958 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b64      	cmp	r3, #100	@ 0x64
 8000fcc:	d901      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e1ec      	b.n	80013ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fd2:	4b53      	ldr	r3, [pc, #332]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1f0      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x10c>
 8000fde:	e000      	b.n	8000fe2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d063      	beq.n	80010b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fee:	4b4c      	ldr	r3, [pc, #304]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 030c 	and.w	r3, r3, #12
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d00b      	beq.n	8001012 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ffa:	4b49      	ldr	r3, [pc, #292]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 030c 	and.w	r3, r3, #12
 8001002:	2b08      	cmp	r3, #8
 8001004:	d11c      	bne.n	8001040 <HAL_RCC_OscConfig+0x18c>
 8001006:	4b46      	ldr	r3, [pc, #280]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d116      	bne.n	8001040 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001012:	4b43      	ldr	r3, [pc, #268]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d005      	beq.n	800102a <HAL_RCC_OscConfig+0x176>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	691b      	ldr	r3, [r3, #16]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d001      	beq.n	800102a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e1c0      	b.n	80013ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800102a:	4b3d      	ldr	r3, [pc, #244]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	4939      	ldr	r1, [pc, #228]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 800103a:	4313      	orrs	r3, r2
 800103c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800103e:	e03a      	b.n	80010b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	691b      	ldr	r3, [r3, #16]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d020      	beq.n	800108a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001048:	4b36      	ldr	r3, [pc, #216]	@ (8001124 <HAL_RCC_OscConfig+0x270>)
 800104a:	2201      	movs	r2, #1
 800104c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104e:	f7ff fc83 	bl	8000958 <HAL_GetTick>
 8001052:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001054:	e008      	b.n	8001068 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001056:	f7ff fc7f 	bl	8000958 <HAL_GetTick>
 800105a:	4602      	mov	r2, r0
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	2b02      	cmp	r3, #2
 8001062:	d901      	bls.n	8001068 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e1a1      	b.n	80013ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001068:	4b2d      	ldr	r3, [pc, #180]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d0f0      	beq.n	8001056 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001074:	4b2a      	ldr	r3, [pc, #168]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	695b      	ldr	r3, [r3, #20]
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	4927      	ldr	r1, [pc, #156]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 8001084:	4313      	orrs	r3, r2
 8001086:	600b      	str	r3, [r1, #0]
 8001088:	e015      	b.n	80010b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800108a:	4b26      	ldr	r3, [pc, #152]	@ (8001124 <HAL_RCC_OscConfig+0x270>)
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001090:	f7ff fc62 	bl	8000958 <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001098:	f7ff fc5e 	bl	8000958 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e180      	b.n	80013ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f0      	bne.n	8001098 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0308 	and.w	r3, r3, #8
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d03a      	beq.n	8001138 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d019      	beq.n	80010fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ca:	4b17      	ldr	r3, [pc, #92]	@ (8001128 <HAL_RCC_OscConfig+0x274>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d0:	f7ff fc42 	bl	8000958 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010d8:	f7ff fc3e 	bl	8000958 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e160      	b.n	80013ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001120 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d0f0      	beq.n	80010d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010f6:	2001      	movs	r0, #1
 80010f8:	f000 fa9c 	bl	8001634 <RCC_Delay>
 80010fc:	e01c      	b.n	8001138 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <HAL_RCC_OscConfig+0x274>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001104:	f7ff fc28 	bl	8000958 <HAL_GetTick>
 8001108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800110a:	e00f      	b.n	800112c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800110c:	f7ff fc24 	bl	8000958 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d908      	bls.n	800112c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e146      	b.n	80013ac <HAL_RCC_OscConfig+0x4f8>
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000
 8001124:	42420000 	.word	0x42420000
 8001128:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800112c:	4b92      	ldr	r3, [pc, #584]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 800112e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1e9      	bne.n	800110c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0304 	and.w	r3, r3, #4
 8001140:	2b00      	cmp	r3, #0
 8001142:	f000 80a6 	beq.w	8001292 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001146:	2300      	movs	r3, #0
 8001148:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800114a:	4b8b      	ldr	r3, [pc, #556]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10d      	bne.n	8001172 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001156:	4b88      	ldr	r3, [pc, #544]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	4a87      	ldr	r2, [pc, #540]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 800115c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001160:	61d3      	str	r3, [r2, #28]
 8001162:	4b85      	ldr	r3, [pc, #532]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800116e:	2301      	movs	r3, #1
 8001170:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001172:	4b82      	ldr	r3, [pc, #520]	@ (800137c <HAL_RCC_OscConfig+0x4c8>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800117a:	2b00      	cmp	r3, #0
 800117c:	d118      	bne.n	80011b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800117e:	4b7f      	ldr	r3, [pc, #508]	@ (800137c <HAL_RCC_OscConfig+0x4c8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a7e      	ldr	r2, [pc, #504]	@ (800137c <HAL_RCC_OscConfig+0x4c8>)
 8001184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800118a:	f7ff fbe5 	bl	8000958 <HAL_GetTick>
 800118e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001190:	e008      	b.n	80011a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001192:	f7ff fbe1 	bl	8000958 <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b64      	cmp	r3, #100	@ 0x64
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e103      	b.n	80013ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a4:	4b75      	ldr	r3, [pc, #468]	@ (800137c <HAL_RCC_OscConfig+0x4c8>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d0f0      	beq.n	8001192 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d106      	bne.n	80011c6 <HAL_RCC_OscConfig+0x312>
 80011b8:	4b6f      	ldr	r3, [pc, #444]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	4a6e      	ldr	r2, [pc, #440]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	6213      	str	r3, [r2, #32]
 80011c4:	e02d      	b.n	8001222 <HAL_RCC_OscConfig+0x36e>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d10c      	bne.n	80011e8 <HAL_RCC_OscConfig+0x334>
 80011ce:	4b6a      	ldr	r3, [pc, #424]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 80011d0:	6a1b      	ldr	r3, [r3, #32]
 80011d2:	4a69      	ldr	r2, [pc, #420]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	f023 0301 	bic.w	r3, r3, #1
 80011d8:	6213      	str	r3, [r2, #32]
 80011da:	4b67      	ldr	r3, [pc, #412]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 80011dc:	6a1b      	ldr	r3, [r3, #32]
 80011de:	4a66      	ldr	r2, [pc, #408]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 80011e0:	f023 0304 	bic.w	r3, r3, #4
 80011e4:	6213      	str	r3, [r2, #32]
 80011e6:	e01c      	b.n	8001222 <HAL_RCC_OscConfig+0x36e>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	2b05      	cmp	r3, #5
 80011ee:	d10c      	bne.n	800120a <HAL_RCC_OscConfig+0x356>
 80011f0:	4b61      	ldr	r3, [pc, #388]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	4a60      	ldr	r2, [pc, #384]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 80011f6:	f043 0304 	orr.w	r3, r3, #4
 80011fa:	6213      	str	r3, [r2, #32]
 80011fc:	4b5e      	ldr	r3, [pc, #376]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 80011fe:	6a1b      	ldr	r3, [r3, #32]
 8001200:	4a5d      	ldr	r2, [pc, #372]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6213      	str	r3, [r2, #32]
 8001208:	e00b      	b.n	8001222 <HAL_RCC_OscConfig+0x36e>
 800120a:	4b5b      	ldr	r3, [pc, #364]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 800120c:	6a1b      	ldr	r3, [r3, #32]
 800120e:	4a5a      	ldr	r2, [pc, #360]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 8001210:	f023 0301 	bic.w	r3, r3, #1
 8001214:	6213      	str	r3, [r2, #32]
 8001216:	4b58      	ldr	r3, [pc, #352]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 8001218:	6a1b      	ldr	r3, [r3, #32]
 800121a:	4a57      	ldr	r2, [pc, #348]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 800121c:	f023 0304 	bic.w	r3, r3, #4
 8001220:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d015      	beq.n	8001256 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122a:	f7ff fb95 	bl	8000958 <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001230:	e00a      	b.n	8001248 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001232:	f7ff fb91 	bl	8000958 <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001240:	4293      	cmp	r3, r2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e0b1      	b.n	80013ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001248:	4b4b      	ldr	r3, [pc, #300]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0ee      	beq.n	8001232 <HAL_RCC_OscConfig+0x37e>
 8001254:	e014      	b.n	8001280 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001256:	f7ff fb7f 	bl	8000958 <HAL_GetTick>
 800125a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800125c:	e00a      	b.n	8001274 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800125e:	f7ff fb7b 	bl	8000958 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800126c:	4293      	cmp	r3, r2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e09b      	b.n	80013ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001274:	4b40      	ldr	r3, [pc, #256]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 8001276:	6a1b      	ldr	r3, [r3, #32]
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1ee      	bne.n	800125e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001280:	7dfb      	ldrb	r3, [r7, #23]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d105      	bne.n	8001292 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001286:	4b3c      	ldr	r3, [pc, #240]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	4a3b      	ldr	r2, [pc, #236]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 800128c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001290:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 8087 	beq.w	80013aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800129c:	4b36      	ldr	r3, [pc, #216]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 030c 	and.w	r3, r3, #12
 80012a4:	2b08      	cmp	r3, #8
 80012a6:	d061      	beq.n	800136c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	69db      	ldr	r3, [r3, #28]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d146      	bne.n	800133e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012b0:	4b33      	ldr	r3, [pc, #204]	@ (8001380 <HAL_RCC_OscConfig+0x4cc>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b6:	f7ff fb4f 	bl	8000958 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012be:	f7ff fb4b 	bl	8000958 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e06d      	b.n	80013ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d0:	4b29      	ldr	r3, [pc, #164]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f0      	bne.n	80012be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012e4:	d108      	bne.n	80012f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012e6:	4b24      	ldr	r3, [pc, #144]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	4921      	ldr	r1, [pc, #132]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 80012f4:	4313      	orrs	r3, r2
 80012f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a19      	ldr	r1, [r3, #32]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001308:	430b      	orrs	r3, r1
 800130a:	491b      	ldr	r1, [pc, #108]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 800130c:	4313      	orrs	r3, r2
 800130e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001310:	4b1b      	ldr	r3, [pc, #108]	@ (8001380 <HAL_RCC_OscConfig+0x4cc>)
 8001312:	2201      	movs	r2, #1
 8001314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001316:	f7ff fb1f 	bl	8000958 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800131e:	f7ff fb1b 	bl	8000958 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e03d      	b.n	80013ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001330:	4b11      	ldr	r3, [pc, #68]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0f0      	beq.n	800131e <HAL_RCC_OscConfig+0x46a>
 800133c:	e035      	b.n	80013aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800133e:	4b10      	ldr	r3, [pc, #64]	@ (8001380 <HAL_RCC_OscConfig+0x4cc>)
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001344:	f7ff fb08 	bl	8000958 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800134c:	f7ff fb04 	bl	8000958 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e026      	b.n	80013ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800135e:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <HAL_RCC_OscConfig+0x4c4>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f0      	bne.n	800134c <HAL_RCC_OscConfig+0x498>
 800136a:	e01e      	b.n	80013aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69db      	ldr	r3, [r3, #28]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d107      	bne.n	8001384 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e019      	b.n	80013ac <HAL_RCC_OscConfig+0x4f8>
 8001378:	40021000 	.word	0x40021000
 800137c:	40007000 	.word	0x40007000
 8001380:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001384:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <HAL_RCC_OscConfig+0x500>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a1b      	ldr	r3, [r3, #32]
 8001394:	429a      	cmp	r2, r3
 8001396:	d106      	bne.n	80013a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d001      	beq.n	80013aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e000      	b.n	80013ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40021000 	.word	0x40021000

080013b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d101      	bne.n	80013cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e0d0      	b.n	800156e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013cc:	4b6a      	ldr	r3, [pc, #424]	@ (8001578 <HAL_RCC_ClockConfig+0x1c0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d910      	bls.n	80013fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013da:	4b67      	ldr	r3, [pc, #412]	@ (8001578 <HAL_RCC_ClockConfig+0x1c0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f023 0207 	bic.w	r2, r3, #7
 80013e2:	4965      	ldr	r1, [pc, #404]	@ (8001578 <HAL_RCC_ClockConfig+0x1c0>)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ea:	4b63      	ldr	r3, [pc, #396]	@ (8001578 <HAL_RCC_ClockConfig+0x1c0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d001      	beq.n	80013fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e0b8      	b.n	800156e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d020      	beq.n	800144a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	2b00      	cmp	r3, #0
 8001412:	d005      	beq.n	8001420 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001414:	4b59      	ldr	r3, [pc, #356]	@ (800157c <HAL_RCC_ClockConfig+0x1c4>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	4a58      	ldr	r2, [pc, #352]	@ (800157c <HAL_RCC_ClockConfig+0x1c4>)
 800141a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800141e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0308 	and.w	r3, r3, #8
 8001428:	2b00      	cmp	r3, #0
 800142a:	d005      	beq.n	8001438 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800142c:	4b53      	ldr	r3, [pc, #332]	@ (800157c <HAL_RCC_ClockConfig+0x1c4>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	4a52      	ldr	r2, [pc, #328]	@ (800157c <HAL_RCC_ClockConfig+0x1c4>)
 8001432:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001436:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001438:	4b50      	ldr	r3, [pc, #320]	@ (800157c <HAL_RCC_ClockConfig+0x1c4>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	494d      	ldr	r1, [pc, #308]	@ (800157c <HAL_RCC_ClockConfig+0x1c4>)
 8001446:	4313      	orrs	r3, r2
 8001448:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	2b00      	cmp	r3, #0
 8001454:	d040      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d107      	bne.n	800146e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145e:	4b47      	ldr	r3, [pc, #284]	@ (800157c <HAL_RCC_ClockConfig+0x1c4>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d115      	bne.n	8001496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e07f      	b.n	800156e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b02      	cmp	r3, #2
 8001474:	d107      	bne.n	8001486 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001476:	4b41      	ldr	r3, [pc, #260]	@ (800157c <HAL_RCC_ClockConfig+0x1c4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d109      	bne.n	8001496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e073      	b.n	800156e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001486:	4b3d      	ldr	r3, [pc, #244]	@ (800157c <HAL_RCC_ClockConfig+0x1c4>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e06b      	b.n	800156e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001496:	4b39      	ldr	r3, [pc, #228]	@ (800157c <HAL_RCC_ClockConfig+0x1c4>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f023 0203 	bic.w	r2, r3, #3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	4936      	ldr	r1, [pc, #216]	@ (800157c <HAL_RCC_ClockConfig+0x1c4>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014a8:	f7ff fa56 	bl	8000958 <HAL_GetTick>
 80014ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ae:	e00a      	b.n	80014c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014b0:	f7ff fa52 	bl	8000958 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014be:	4293      	cmp	r3, r2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e053      	b.n	800156e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c6:	4b2d      	ldr	r3, [pc, #180]	@ (800157c <HAL_RCC_ClockConfig+0x1c4>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 020c 	and.w	r2, r3, #12
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d1eb      	bne.n	80014b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014d8:	4b27      	ldr	r3, [pc, #156]	@ (8001578 <HAL_RCC_ClockConfig+0x1c0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d210      	bcs.n	8001508 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e6:	4b24      	ldr	r3, [pc, #144]	@ (8001578 <HAL_RCC_ClockConfig+0x1c0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f023 0207 	bic.w	r2, r3, #7
 80014ee:	4922      	ldr	r1, [pc, #136]	@ (8001578 <HAL_RCC_ClockConfig+0x1c0>)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014f6:	4b20      	ldr	r3, [pc, #128]	@ (8001578 <HAL_RCC_ClockConfig+0x1c0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	429a      	cmp	r2, r3
 8001502:	d001      	beq.n	8001508 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e032      	b.n	800156e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	2b00      	cmp	r3, #0
 8001512:	d008      	beq.n	8001526 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001514:	4b19      	ldr	r3, [pc, #100]	@ (800157c <HAL_RCC_ClockConfig+0x1c4>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	4916      	ldr	r1, [pc, #88]	@ (800157c <HAL_RCC_ClockConfig+0x1c4>)
 8001522:	4313      	orrs	r3, r2
 8001524:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	2b00      	cmp	r3, #0
 8001530:	d009      	beq.n	8001546 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001532:	4b12      	ldr	r3, [pc, #72]	@ (800157c <HAL_RCC_ClockConfig+0x1c4>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	490e      	ldr	r1, [pc, #56]	@ (800157c <HAL_RCC_ClockConfig+0x1c4>)
 8001542:	4313      	orrs	r3, r2
 8001544:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001546:	f000 f821 	bl	800158c <HAL_RCC_GetSysClockFreq>
 800154a:	4602      	mov	r2, r0
 800154c:	4b0b      	ldr	r3, [pc, #44]	@ (800157c <HAL_RCC_ClockConfig+0x1c4>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	091b      	lsrs	r3, r3, #4
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	490a      	ldr	r1, [pc, #40]	@ (8001580 <HAL_RCC_ClockConfig+0x1c8>)
 8001558:	5ccb      	ldrb	r3, [r1, r3]
 800155a:	fa22 f303 	lsr.w	r3, r2, r3
 800155e:	4a09      	ldr	r2, [pc, #36]	@ (8001584 <HAL_RCC_ClockConfig+0x1cc>)
 8001560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001562:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <HAL_RCC_ClockConfig+0x1d0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff f9b4 	bl	80008d4 <HAL_InitTick>

  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40022000 	.word	0x40022000
 800157c:	40021000 	.word	0x40021000
 8001580:	08002004 	.word	0x08002004
 8001584:	20000000 	.word	0x20000000
 8001588:	20000004 	.word	0x20000004

0800158c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800158c:	b480      	push	{r7}
 800158e:	b087      	sub	sp, #28
 8001590:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001620 <HAL_RCC_GetSysClockFreq+0x94>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f003 030c 	and.w	r3, r3, #12
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	d002      	beq.n	80015bc <HAL_RCC_GetSysClockFreq+0x30>
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d003      	beq.n	80015c2 <HAL_RCC_GetSysClockFreq+0x36>
 80015ba:	e027      	b.n	800160c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015bc:	4b19      	ldr	r3, [pc, #100]	@ (8001624 <HAL_RCC_GetSysClockFreq+0x98>)
 80015be:	613b      	str	r3, [r7, #16]
      break;
 80015c0:	e027      	b.n	8001612 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	0c9b      	lsrs	r3, r3, #18
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	4a17      	ldr	r2, [pc, #92]	@ (8001628 <HAL_RCC_GetSysClockFreq+0x9c>)
 80015cc:	5cd3      	ldrb	r3, [r2, r3]
 80015ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d010      	beq.n	80015fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015da:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <HAL_RCC_GetSysClockFreq+0x94>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	0c5b      	lsrs	r3, r3, #17
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	4a11      	ldr	r2, [pc, #68]	@ (800162c <HAL_RCC_GetSysClockFreq+0xa0>)
 80015e6:	5cd3      	ldrb	r3, [r2, r3]
 80015e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001624 <HAL_RCC_GetSysClockFreq+0x98>)
 80015ee:	fb03 f202 	mul.w	r2, r3, r2
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	e004      	b.n	8001606 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001630 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001600:	fb02 f303 	mul.w	r3, r2, r3
 8001604:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	613b      	str	r3, [r7, #16]
      break;
 800160a:	e002      	b.n	8001612 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800160c:	4b05      	ldr	r3, [pc, #20]	@ (8001624 <HAL_RCC_GetSysClockFreq+0x98>)
 800160e:	613b      	str	r3, [r7, #16]
      break;
 8001610:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001612:	693b      	ldr	r3, [r7, #16]
}
 8001614:	4618      	mov	r0, r3
 8001616:	371c      	adds	r7, #28
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40021000 	.word	0x40021000
 8001624:	007a1200 	.word	0x007a1200
 8001628:	08002014 	.word	0x08002014
 800162c:	08002024 	.word	0x08002024
 8001630:	003d0900 	.word	0x003d0900

08001634 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800163c:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <RCC_Delay+0x34>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a0a      	ldr	r2, [pc, #40]	@ (800166c <RCC_Delay+0x38>)
 8001642:	fba2 2303 	umull	r2, r3, r2, r3
 8001646:	0a5b      	lsrs	r3, r3, #9
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	fb02 f303 	mul.w	r3, r2, r3
 800164e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001650:	bf00      	nop
  }
  while (Delay --);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	1e5a      	subs	r2, r3, #1
 8001656:	60fa      	str	r2, [r7, #12]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1f9      	bne.n	8001650 <RCC_Delay+0x1c>
}
 800165c:	bf00      	nop
 800165e:	bf00      	nop
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	20000000 	.word	0x20000000
 800166c:	10624dd3 	.word	0x10624dd3

08001670 <siprintf>:
 8001670:	b40e      	push	{r1, r2, r3}
 8001672:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001676:	b510      	push	{r4, lr}
 8001678:	2400      	movs	r4, #0
 800167a:	b09d      	sub	sp, #116	@ 0x74
 800167c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800167e:	9002      	str	r0, [sp, #8]
 8001680:	9006      	str	r0, [sp, #24]
 8001682:	9107      	str	r1, [sp, #28]
 8001684:	9104      	str	r1, [sp, #16]
 8001686:	4809      	ldr	r0, [pc, #36]	@ (80016ac <siprintf+0x3c>)
 8001688:	4909      	ldr	r1, [pc, #36]	@ (80016b0 <siprintf+0x40>)
 800168a:	f853 2b04 	ldr.w	r2, [r3], #4
 800168e:	9105      	str	r1, [sp, #20]
 8001690:	6800      	ldr	r0, [r0, #0]
 8001692:	a902      	add	r1, sp, #8
 8001694:	9301      	str	r3, [sp, #4]
 8001696:	941b      	str	r4, [sp, #108]	@ 0x6c
 8001698:	f000 f992 	bl	80019c0 <_svfiprintf_r>
 800169c:	9b02      	ldr	r3, [sp, #8]
 800169e:	701c      	strb	r4, [r3, #0]
 80016a0:	b01d      	add	sp, #116	@ 0x74
 80016a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016a6:	b003      	add	sp, #12
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	2000000c 	.word	0x2000000c
 80016b0:	ffff0208 	.word	0xffff0208

080016b4 <memset>:
 80016b4:	4603      	mov	r3, r0
 80016b6:	4402      	add	r2, r0
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d100      	bne.n	80016be <memset+0xa>
 80016bc:	4770      	bx	lr
 80016be:	f803 1b01 	strb.w	r1, [r3], #1
 80016c2:	e7f9      	b.n	80016b8 <memset+0x4>

080016c4 <__errno>:
 80016c4:	4b01      	ldr	r3, [pc, #4]	@ (80016cc <__errno+0x8>)
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	2000000c 	.word	0x2000000c

080016d0 <__libc_init_array>:
 80016d0:	b570      	push	{r4, r5, r6, lr}
 80016d2:	2600      	movs	r6, #0
 80016d4:	4d0c      	ldr	r5, [pc, #48]	@ (8001708 <__libc_init_array+0x38>)
 80016d6:	4c0d      	ldr	r4, [pc, #52]	@ (800170c <__libc_init_array+0x3c>)
 80016d8:	1b64      	subs	r4, r4, r5
 80016da:	10a4      	asrs	r4, r4, #2
 80016dc:	42a6      	cmp	r6, r4
 80016de:	d109      	bne.n	80016f4 <__libc_init_array+0x24>
 80016e0:	f000 fc76 	bl	8001fd0 <_init>
 80016e4:	2600      	movs	r6, #0
 80016e6:	4d0a      	ldr	r5, [pc, #40]	@ (8001710 <__libc_init_array+0x40>)
 80016e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001714 <__libc_init_array+0x44>)
 80016ea:	1b64      	subs	r4, r4, r5
 80016ec:	10a4      	asrs	r4, r4, #2
 80016ee:	42a6      	cmp	r6, r4
 80016f0:	d105      	bne.n	80016fe <__libc_init_array+0x2e>
 80016f2:	bd70      	pop	{r4, r5, r6, pc}
 80016f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80016f8:	4798      	blx	r3
 80016fa:	3601      	adds	r6, #1
 80016fc:	e7ee      	b.n	80016dc <__libc_init_array+0xc>
 80016fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001702:	4798      	blx	r3
 8001704:	3601      	adds	r6, #1
 8001706:	e7f2      	b.n	80016ee <__libc_init_array+0x1e>
 8001708:	0800205c 	.word	0x0800205c
 800170c:	0800205c 	.word	0x0800205c
 8001710:	0800205c 	.word	0x0800205c
 8001714:	08002060 	.word	0x08002060

08001718 <__retarget_lock_acquire_recursive>:
 8001718:	4770      	bx	lr

0800171a <__retarget_lock_release_recursive>:
 800171a:	4770      	bx	lr

0800171c <_free_r>:
 800171c:	b538      	push	{r3, r4, r5, lr}
 800171e:	4605      	mov	r5, r0
 8001720:	2900      	cmp	r1, #0
 8001722:	d040      	beq.n	80017a6 <_free_r+0x8a>
 8001724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001728:	1f0c      	subs	r4, r1, #4
 800172a:	2b00      	cmp	r3, #0
 800172c:	bfb8      	it	lt
 800172e:	18e4      	addlt	r4, r4, r3
 8001730:	f000 f8de 	bl	80018f0 <__malloc_lock>
 8001734:	4a1c      	ldr	r2, [pc, #112]	@ (80017a8 <_free_r+0x8c>)
 8001736:	6813      	ldr	r3, [r2, #0]
 8001738:	b933      	cbnz	r3, 8001748 <_free_r+0x2c>
 800173a:	6063      	str	r3, [r4, #4]
 800173c:	6014      	str	r4, [r2, #0]
 800173e:	4628      	mov	r0, r5
 8001740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001744:	f000 b8da 	b.w	80018fc <__malloc_unlock>
 8001748:	42a3      	cmp	r3, r4
 800174a:	d908      	bls.n	800175e <_free_r+0x42>
 800174c:	6820      	ldr	r0, [r4, #0]
 800174e:	1821      	adds	r1, r4, r0
 8001750:	428b      	cmp	r3, r1
 8001752:	bf01      	itttt	eq
 8001754:	6819      	ldreq	r1, [r3, #0]
 8001756:	685b      	ldreq	r3, [r3, #4]
 8001758:	1809      	addeq	r1, r1, r0
 800175a:	6021      	streq	r1, [r4, #0]
 800175c:	e7ed      	b.n	800173a <_free_r+0x1e>
 800175e:	461a      	mov	r2, r3
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	b10b      	cbz	r3, 8001768 <_free_r+0x4c>
 8001764:	42a3      	cmp	r3, r4
 8001766:	d9fa      	bls.n	800175e <_free_r+0x42>
 8001768:	6811      	ldr	r1, [r2, #0]
 800176a:	1850      	adds	r0, r2, r1
 800176c:	42a0      	cmp	r0, r4
 800176e:	d10b      	bne.n	8001788 <_free_r+0x6c>
 8001770:	6820      	ldr	r0, [r4, #0]
 8001772:	4401      	add	r1, r0
 8001774:	1850      	adds	r0, r2, r1
 8001776:	4283      	cmp	r3, r0
 8001778:	6011      	str	r1, [r2, #0]
 800177a:	d1e0      	bne.n	800173e <_free_r+0x22>
 800177c:	6818      	ldr	r0, [r3, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	4408      	add	r0, r1
 8001782:	6010      	str	r0, [r2, #0]
 8001784:	6053      	str	r3, [r2, #4]
 8001786:	e7da      	b.n	800173e <_free_r+0x22>
 8001788:	d902      	bls.n	8001790 <_free_r+0x74>
 800178a:	230c      	movs	r3, #12
 800178c:	602b      	str	r3, [r5, #0]
 800178e:	e7d6      	b.n	800173e <_free_r+0x22>
 8001790:	6820      	ldr	r0, [r4, #0]
 8001792:	1821      	adds	r1, r4, r0
 8001794:	428b      	cmp	r3, r1
 8001796:	bf01      	itttt	eq
 8001798:	6819      	ldreq	r1, [r3, #0]
 800179a:	685b      	ldreq	r3, [r3, #4]
 800179c:	1809      	addeq	r1, r1, r0
 800179e:	6021      	streq	r1, [r4, #0]
 80017a0:	6063      	str	r3, [r4, #4]
 80017a2:	6054      	str	r4, [r2, #4]
 80017a4:	e7cb      	b.n	800173e <_free_r+0x22>
 80017a6:	bd38      	pop	{r3, r4, r5, pc}
 80017a8:	200001c4 	.word	0x200001c4

080017ac <sbrk_aligned>:
 80017ac:	b570      	push	{r4, r5, r6, lr}
 80017ae:	4e0f      	ldr	r6, [pc, #60]	@ (80017ec <sbrk_aligned+0x40>)
 80017b0:	460c      	mov	r4, r1
 80017b2:	6831      	ldr	r1, [r6, #0]
 80017b4:	4605      	mov	r5, r0
 80017b6:	b911      	cbnz	r1, 80017be <sbrk_aligned+0x12>
 80017b8:	f000 fba8 	bl	8001f0c <_sbrk_r>
 80017bc:	6030      	str	r0, [r6, #0]
 80017be:	4621      	mov	r1, r4
 80017c0:	4628      	mov	r0, r5
 80017c2:	f000 fba3 	bl	8001f0c <_sbrk_r>
 80017c6:	1c43      	adds	r3, r0, #1
 80017c8:	d103      	bne.n	80017d2 <sbrk_aligned+0x26>
 80017ca:	f04f 34ff 	mov.w	r4, #4294967295
 80017ce:	4620      	mov	r0, r4
 80017d0:	bd70      	pop	{r4, r5, r6, pc}
 80017d2:	1cc4      	adds	r4, r0, #3
 80017d4:	f024 0403 	bic.w	r4, r4, #3
 80017d8:	42a0      	cmp	r0, r4
 80017da:	d0f8      	beq.n	80017ce <sbrk_aligned+0x22>
 80017dc:	1a21      	subs	r1, r4, r0
 80017de:	4628      	mov	r0, r5
 80017e0:	f000 fb94 	bl	8001f0c <_sbrk_r>
 80017e4:	3001      	adds	r0, #1
 80017e6:	d1f2      	bne.n	80017ce <sbrk_aligned+0x22>
 80017e8:	e7ef      	b.n	80017ca <sbrk_aligned+0x1e>
 80017ea:	bf00      	nop
 80017ec:	200001c0 	.word	0x200001c0

080017f0 <_malloc_r>:
 80017f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017f4:	1ccd      	adds	r5, r1, #3
 80017f6:	f025 0503 	bic.w	r5, r5, #3
 80017fa:	3508      	adds	r5, #8
 80017fc:	2d0c      	cmp	r5, #12
 80017fe:	bf38      	it	cc
 8001800:	250c      	movcc	r5, #12
 8001802:	2d00      	cmp	r5, #0
 8001804:	4606      	mov	r6, r0
 8001806:	db01      	blt.n	800180c <_malloc_r+0x1c>
 8001808:	42a9      	cmp	r1, r5
 800180a:	d904      	bls.n	8001816 <_malloc_r+0x26>
 800180c:	230c      	movs	r3, #12
 800180e:	6033      	str	r3, [r6, #0]
 8001810:	2000      	movs	r0, #0
 8001812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001816:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80018ec <_malloc_r+0xfc>
 800181a:	f000 f869 	bl	80018f0 <__malloc_lock>
 800181e:	f8d8 3000 	ldr.w	r3, [r8]
 8001822:	461c      	mov	r4, r3
 8001824:	bb44      	cbnz	r4, 8001878 <_malloc_r+0x88>
 8001826:	4629      	mov	r1, r5
 8001828:	4630      	mov	r0, r6
 800182a:	f7ff ffbf 	bl	80017ac <sbrk_aligned>
 800182e:	1c43      	adds	r3, r0, #1
 8001830:	4604      	mov	r4, r0
 8001832:	d158      	bne.n	80018e6 <_malloc_r+0xf6>
 8001834:	f8d8 4000 	ldr.w	r4, [r8]
 8001838:	4627      	mov	r7, r4
 800183a:	2f00      	cmp	r7, #0
 800183c:	d143      	bne.n	80018c6 <_malloc_r+0xd6>
 800183e:	2c00      	cmp	r4, #0
 8001840:	d04b      	beq.n	80018da <_malloc_r+0xea>
 8001842:	6823      	ldr	r3, [r4, #0]
 8001844:	4639      	mov	r1, r7
 8001846:	4630      	mov	r0, r6
 8001848:	eb04 0903 	add.w	r9, r4, r3
 800184c:	f000 fb5e 	bl	8001f0c <_sbrk_r>
 8001850:	4581      	cmp	r9, r0
 8001852:	d142      	bne.n	80018da <_malloc_r+0xea>
 8001854:	6821      	ldr	r1, [r4, #0]
 8001856:	4630      	mov	r0, r6
 8001858:	1a6d      	subs	r5, r5, r1
 800185a:	4629      	mov	r1, r5
 800185c:	f7ff ffa6 	bl	80017ac <sbrk_aligned>
 8001860:	3001      	adds	r0, #1
 8001862:	d03a      	beq.n	80018da <_malloc_r+0xea>
 8001864:	6823      	ldr	r3, [r4, #0]
 8001866:	442b      	add	r3, r5
 8001868:	6023      	str	r3, [r4, #0]
 800186a:	f8d8 3000 	ldr.w	r3, [r8]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	bb62      	cbnz	r2, 80018cc <_malloc_r+0xdc>
 8001872:	f8c8 7000 	str.w	r7, [r8]
 8001876:	e00f      	b.n	8001898 <_malloc_r+0xa8>
 8001878:	6822      	ldr	r2, [r4, #0]
 800187a:	1b52      	subs	r2, r2, r5
 800187c:	d420      	bmi.n	80018c0 <_malloc_r+0xd0>
 800187e:	2a0b      	cmp	r2, #11
 8001880:	d917      	bls.n	80018b2 <_malloc_r+0xc2>
 8001882:	1961      	adds	r1, r4, r5
 8001884:	42a3      	cmp	r3, r4
 8001886:	6025      	str	r5, [r4, #0]
 8001888:	bf18      	it	ne
 800188a:	6059      	strne	r1, [r3, #4]
 800188c:	6863      	ldr	r3, [r4, #4]
 800188e:	bf08      	it	eq
 8001890:	f8c8 1000 	streq.w	r1, [r8]
 8001894:	5162      	str	r2, [r4, r5]
 8001896:	604b      	str	r3, [r1, #4]
 8001898:	4630      	mov	r0, r6
 800189a:	f000 f82f 	bl	80018fc <__malloc_unlock>
 800189e:	f104 000b 	add.w	r0, r4, #11
 80018a2:	1d23      	adds	r3, r4, #4
 80018a4:	f020 0007 	bic.w	r0, r0, #7
 80018a8:	1ac2      	subs	r2, r0, r3
 80018aa:	bf1c      	itt	ne
 80018ac:	1a1b      	subne	r3, r3, r0
 80018ae:	50a3      	strne	r3, [r4, r2]
 80018b0:	e7af      	b.n	8001812 <_malloc_r+0x22>
 80018b2:	6862      	ldr	r2, [r4, #4]
 80018b4:	42a3      	cmp	r3, r4
 80018b6:	bf0c      	ite	eq
 80018b8:	f8c8 2000 	streq.w	r2, [r8]
 80018bc:	605a      	strne	r2, [r3, #4]
 80018be:	e7eb      	b.n	8001898 <_malloc_r+0xa8>
 80018c0:	4623      	mov	r3, r4
 80018c2:	6864      	ldr	r4, [r4, #4]
 80018c4:	e7ae      	b.n	8001824 <_malloc_r+0x34>
 80018c6:	463c      	mov	r4, r7
 80018c8:	687f      	ldr	r7, [r7, #4]
 80018ca:	e7b6      	b.n	800183a <_malloc_r+0x4a>
 80018cc:	461a      	mov	r2, r3
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	42a3      	cmp	r3, r4
 80018d2:	d1fb      	bne.n	80018cc <_malloc_r+0xdc>
 80018d4:	2300      	movs	r3, #0
 80018d6:	6053      	str	r3, [r2, #4]
 80018d8:	e7de      	b.n	8001898 <_malloc_r+0xa8>
 80018da:	230c      	movs	r3, #12
 80018dc:	4630      	mov	r0, r6
 80018de:	6033      	str	r3, [r6, #0]
 80018e0:	f000 f80c 	bl	80018fc <__malloc_unlock>
 80018e4:	e794      	b.n	8001810 <_malloc_r+0x20>
 80018e6:	6005      	str	r5, [r0, #0]
 80018e8:	e7d6      	b.n	8001898 <_malloc_r+0xa8>
 80018ea:	bf00      	nop
 80018ec:	200001c4 	.word	0x200001c4

080018f0 <__malloc_lock>:
 80018f0:	4801      	ldr	r0, [pc, #4]	@ (80018f8 <__malloc_lock+0x8>)
 80018f2:	f7ff bf11 	b.w	8001718 <__retarget_lock_acquire_recursive>
 80018f6:	bf00      	nop
 80018f8:	200001bc 	.word	0x200001bc

080018fc <__malloc_unlock>:
 80018fc:	4801      	ldr	r0, [pc, #4]	@ (8001904 <__malloc_unlock+0x8>)
 80018fe:	f7ff bf0c 	b.w	800171a <__retarget_lock_release_recursive>
 8001902:	bf00      	nop
 8001904:	200001bc 	.word	0x200001bc

08001908 <__ssputs_r>:
 8001908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800190c:	461f      	mov	r7, r3
 800190e:	688e      	ldr	r6, [r1, #8]
 8001910:	4682      	mov	sl, r0
 8001912:	42be      	cmp	r6, r7
 8001914:	460c      	mov	r4, r1
 8001916:	4690      	mov	r8, r2
 8001918:	680b      	ldr	r3, [r1, #0]
 800191a:	d82d      	bhi.n	8001978 <__ssputs_r+0x70>
 800191c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001920:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001924:	d026      	beq.n	8001974 <__ssputs_r+0x6c>
 8001926:	6965      	ldr	r5, [r4, #20]
 8001928:	6909      	ldr	r1, [r1, #16]
 800192a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800192e:	eba3 0901 	sub.w	r9, r3, r1
 8001932:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001936:	1c7b      	adds	r3, r7, #1
 8001938:	444b      	add	r3, r9
 800193a:	106d      	asrs	r5, r5, #1
 800193c:	429d      	cmp	r5, r3
 800193e:	bf38      	it	cc
 8001940:	461d      	movcc	r5, r3
 8001942:	0553      	lsls	r3, r2, #21
 8001944:	d527      	bpl.n	8001996 <__ssputs_r+0x8e>
 8001946:	4629      	mov	r1, r5
 8001948:	f7ff ff52 	bl	80017f0 <_malloc_r>
 800194c:	4606      	mov	r6, r0
 800194e:	b360      	cbz	r0, 80019aa <__ssputs_r+0xa2>
 8001950:	464a      	mov	r2, r9
 8001952:	6921      	ldr	r1, [r4, #16]
 8001954:	f000 faf8 	bl	8001f48 <memcpy>
 8001958:	89a3      	ldrh	r3, [r4, #12]
 800195a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800195e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001962:	81a3      	strh	r3, [r4, #12]
 8001964:	6126      	str	r6, [r4, #16]
 8001966:	444e      	add	r6, r9
 8001968:	6026      	str	r6, [r4, #0]
 800196a:	463e      	mov	r6, r7
 800196c:	6165      	str	r5, [r4, #20]
 800196e:	eba5 0509 	sub.w	r5, r5, r9
 8001972:	60a5      	str	r5, [r4, #8]
 8001974:	42be      	cmp	r6, r7
 8001976:	d900      	bls.n	800197a <__ssputs_r+0x72>
 8001978:	463e      	mov	r6, r7
 800197a:	4632      	mov	r2, r6
 800197c:	4641      	mov	r1, r8
 800197e:	6820      	ldr	r0, [r4, #0]
 8001980:	f000 faaa 	bl	8001ed8 <memmove>
 8001984:	2000      	movs	r0, #0
 8001986:	68a3      	ldr	r3, [r4, #8]
 8001988:	1b9b      	subs	r3, r3, r6
 800198a:	60a3      	str	r3, [r4, #8]
 800198c:	6823      	ldr	r3, [r4, #0]
 800198e:	4433      	add	r3, r6
 8001990:	6023      	str	r3, [r4, #0]
 8001992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001996:	462a      	mov	r2, r5
 8001998:	f000 fae4 	bl	8001f64 <_realloc_r>
 800199c:	4606      	mov	r6, r0
 800199e:	2800      	cmp	r0, #0
 80019a0:	d1e0      	bne.n	8001964 <__ssputs_r+0x5c>
 80019a2:	4650      	mov	r0, sl
 80019a4:	6921      	ldr	r1, [r4, #16]
 80019a6:	f7ff feb9 	bl	800171c <_free_r>
 80019aa:	230c      	movs	r3, #12
 80019ac:	f8ca 3000 	str.w	r3, [sl]
 80019b0:	89a3      	ldrh	r3, [r4, #12]
 80019b2:	f04f 30ff 	mov.w	r0, #4294967295
 80019b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019ba:	81a3      	strh	r3, [r4, #12]
 80019bc:	e7e9      	b.n	8001992 <__ssputs_r+0x8a>
	...

080019c0 <_svfiprintf_r>:
 80019c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019c4:	4698      	mov	r8, r3
 80019c6:	898b      	ldrh	r3, [r1, #12]
 80019c8:	4607      	mov	r7, r0
 80019ca:	061b      	lsls	r3, r3, #24
 80019cc:	460d      	mov	r5, r1
 80019ce:	4614      	mov	r4, r2
 80019d0:	b09d      	sub	sp, #116	@ 0x74
 80019d2:	d510      	bpl.n	80019f6 <_svfiprintf_r+0x36>
 80019d4:	690b      	ldr	r3, [r1, #16]
 80019d6:	b973      	cbnz	r3, 80019f6 <_svfiprintf_r+0x36>
 80019d8:	2140      	movs	r1, #64	@ 0x40
 80019da:	f7ff ff09 	bl	80017f0 <_malloc_r>
 80019de:	6028      	str	r0, [r5, #0]
 80019e0:	6128      	str	r0, [r5, #16]
 80019e2:	b930      	cbnz	r0, 80019f2 <_svfiprintf_r+0x32>
 80019e4:	230c      	movs	r3, #12
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ec:	b01d      	add	sp, #116	@ 0x74
 80019ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019f2:	2340      	movs	r3, #64	@ 0x40
 80019f4:	616b      	str	r3, [r5, #20]
 80019f6:	2300      	movs	r3, #0
 80019f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80019fa:	2320      	movs	r3, #32
 80019fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001a00:	2330      	movs	r3, #48	@ 0x30
 8001a02:	f04f 0901 	mov.w	r9, #1
 8001a06:	f8cd 800c 	str.w	r8, [sp, #12]
 8001a0a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8001ba4 <_svfiprintf_r+0x1e4>
 8001a0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001a12:	4623      	mov	r3, r4
 8001a14:	469a      	mov	sl, r3
 8001a16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001a1a:	b10a      	cbz	r2, 8001a20 <_svfiprintf_r+0x60>
 8001a1c:	2a25      	cmp	r2, #37	@ 0x25
 8001a1e:	d1f9      	bne.n	8001a14 <_svfiprintf_r+0x54>
 8001a20:	ebba 0b04 	subs.w	fp, sl, r4
 8001a24:	d00b      	beq.n	8001a3e <_svfiprintf_r+0x7e>
 8001a26:	465b      	mov	r3, fp
 8001a28:	4622      	mov	r2, r4
 8001a2a:	4629      	mov	r1, r5
 8001a2c:	4638      	mov	r0, r7
 8001a2e:	f7ff ff6b 	bl	8001908 <__ssputs_r>
 8001a32:	3001      	adds	r0, #1
 8001a34:	f000 80a7 	beq.w	8001b86 <_svfiprintf_r+0x1c6>
 8001a38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001a3a:	445a      	add	r2, fp
 8001a3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8001a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 809f 	beq.w	8001b86 <_svfiprintf_r+0x1c6>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a52:	f10a 0a01 	add.w	sl, sl, #1
 8001a56:	9304      	str	r3, [sp, #16]
 8001a58:	9307      	str	r3, [sp, #28]
 8001a5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001a5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8001a60:	4654      	mov	r4, sl
 8001a62:	2205      	movs	r2, #5
 8001a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a68:	484e      	ldr	r0, [pc, #312]	@ (8001ba4 <_svfiprintf_r+0x1e4>)
 8001a6a:	f000 fa5f 	bl	8001f2c <memchr>
 8001a6e:	9a04      	ldr	r2, [sp, #16]
 8001a70:	b9d8      	cbnz	r0, 8001aaa <_svfiprintf_r+0xea>
 8001a72:	06d0      	lsls	r0, r2, #27
 8001a74:	bf44      	itt	mi
 8001a76:	2320      	movmi	r3, #32
 8001a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001a7c:	0711      	lsls	r1, r2, #28
 8001a7e:	bf44      	itt	mi
 8001a80:	232b      	movmi	r3, #43	@ 0x2b
 8001a82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001a86:	f89a 3000 	ldrb.w	r3, [sl]
 8001a8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a8c:	d015      	beq.n	8001aba <_svfiprintf_r+0xfa>
 8001a8e:	4654      	mov	r4, sl
 8001a90:	2000      	movs	r0, #0
 8001a92:	f04f 0c0a 	mov.w	ip, #10
 8001a96:	9a07      	ldr	r2, [sp, #28]
 8001a98:	4621      	mov	r1, r4
 8001a9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a9e:	3b30      	subs	r3, #48	@ 0x30
 8001aa0:	2b09      	cmp	r3, #9
 8001aa2:	d94b      	bls.n	8001b3c <_svfiprintf_r+0x17c>
 8001aa4:	b1b0      	cbz	r0, 8001ad4 <_svfiprintf_r+0x114>
 8001aa6:	9207      	str	r2, [sp, #28]
 8001aa8:	e014      	b.n	8001ad4 <_svfiprintf_r+0x114>
 8001aaa:	eba0 0308 	sub.w	r3, r0, r8
 8001aae:	fa09 f303 	lsl.w	r3, r9, r3
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	46a2      	mov	sl, r4
 8001ab6:	9304      	str	r3, [sp, #16]
 8001ab8:	e7d2      	b.n	8001a60 <_svfiprintf_r+0xa0>
 8001aba:	9b03      	ldr	r3, [sp, #12]
 8001abc:	1d19      	adds	r1, r3, #4
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	9103      	str	r1, [sp, #12]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	bfbb      	ittet	lt
 8001ac6:	425b      	neglt	r3, r3
 8001ac8:	f042 0202 	orrlt.w	r2, r2, #2
 8001acc:	9307      	strge	r3, [sp, #28]
 8001ace:	9307      	strlt	r3, [sp, #28]
 8001ad0:	bfb8      	it	lt
 8001ad2:	9204      	strlt	r2, [sp, #16]
 8001ad4:	7823      	ldrb	r3, [r4, #0]
 8001ad6:	2b2e      	cmp	r3, #46	@ 0x2e
 8001ad8:	d10a      	bne.n	8001af0 <_svfiprintf_r+0x130>
 8001ada:	7863      	ldrb	r3, [r4, #1]
 8001adc:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ade:	d132      	bne.n	8001b46 <_svfiprintf_r+0x186>
 8001ae0:	9b03      	ldr	r3, [sp, #12]
 8001ae2:	3402      	adds	r4, #2
 8001ae4:	1d1a      	adds	r2, r3, #4
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	9203      	str	r2, [sp, #12]
 8001aea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001aee:	9305      	str	r3, [sp, #20]
 8001af0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8001ba8 <_svfiprintf_r+0x1e8>
 8001af4:	2203      	movs	r2, #3
 8001af6:	4650      	mov	r0, sl
 8001af8:	7821      	ldrb	r1, [r4, #0]
 8001afa:	f000 fa17 	bl	8001f2c <memchr>
 8001afe:	b138      	cbz	r0, 8001b10 <_svfiprintf_r+0x150>
 8001b00:	2240      	movs	r2, #64	@ 0x40
 8001b02:	9b04      	ldr	r3, [sp, #16]
 8001b04:	eba0 000a 	sub.w	r0, r0, sl
 8001b08:	4082      	lsls	r2, r0
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	3401      	adds	r4, #1
 8001b0e:	9304      	str	r3, [sp, #16]
 8001b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b14:	2206      	movs	r2, #6
 8001b16:	4825      	ldr	r0, [pc, #148]	@ (8001bac <_svfiprintf_r+0x1ec>)
 8001b18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001b1c:	f000 fa06 	bl	8001f2c <memchr>
 8001b20:	2800      	cmp	r0, #0
 8001b22:	d036      	beq.n	8001b92 <_svfiprintf_r+0x1d2>
 8001b24:	4b22      	ldr	r3, [pc, #136]	@ (8001bb0 <_svfiprintf_r+0x1f0>)
 8001b26:	bb1b      	cbnz	r3, 8001b70 <_svfiprintf_r+0x1b0>
 8001b28:	9b03      	ldr	r3, [sp, #12]
 8001b2a:	3307      	adds	r3, #7
 8001b2c:	f023 0307 	bic.w	r3, r3, #7
 8001b30:	3308      	adds	r3, #8
 8001b32:	9303      	str	r3, [sp, #12]
 8001b34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001b36:	4433      	add	r3, r6
 8001b38:	9309      	str	r3, [sp, #36]	@ 0x24
 8001b3a:	e76a      	b.n	8001a12 <_svfiprintf_r+0x52>
 8001b3c:	460c      	mov	r4, r1
 8001b3e:	2001      	movs	r0, #1
 8001b40:	fb0c 3202 	mla	r2, ip, r2, r3
 8001b44:	e7a8      	b.n	8001a98 <_svfiprintf_r+0xd8>
 8001b46:	2300      	movs	r3, #0
 8001b48:	f04f 0c0a 	mov.w	ip, #10
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	3401      	adds	r4, #1
 8001b50:	9305      	str	r3, [sp, #20]
 8001b52:	4620      	mov	r0, r4
 8001b54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b58:	3a30      	subs	r2, #48	@ 0x30
 8001b5a:	2a09      	cmp	r2, #9
 8001b5c:	d903      	bls.n	8001b66 <_svfiprintf_r+0x1a6>
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0c6      	beq.n	8001af0 <_svfiprintf_r+0x130>
 8001b62:	9105      	str	r1, [sp, #20]
 8001b64:	e7c4      	b.n	8001af0 <_svfiprintf_r+0x130>
 8001b66:	4604      	mov	r4, r0
 8001b68:	2301      	movs	r3, #1
 8001b6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b6e:	e7f0      	b.n	8001b52 <_svfiprintf_r+0x192>
 8001b70:	ab03      	add	r3, sp, #12
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	462a      	mov	r2, r5
 8001b76:	4638      	mov	r0, r7
 8001b78:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb4 <_svfiprintf_r+0x1f4>)
 8001b7a:	a904      	add	r1, sp, #16
 8001b7c:	f3af 8000 	nop.w
 8001b80:	1c42      	adds	r2, r0, #1
 8001b82:	4606      	mov	r6, r0
 8001b84:	d1d6      	bne.n	8001b34 <_svfiprintf_r+0x174>
 8001b86:	89ab      	ldrh	r3, [r5, #12]
 8001b88:	065b      	lsls	r3, r3, #25
 8001b8a:	f53f af2d 	bmi.w	80019e8 <_svfiprintf_r+0x28>
 8001b8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001b90:	e72c      	b.n	80019ec <_svfiprintf_r+0x2c>
 8001b92:	ab03      	add	r3, sp, #12
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	462a      	mov	r2, r5
 8001b98:	4638      	mov	r0, r7
 8001b9a:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <_svfiprintf_r+0x1f4>)
 8001b9c:	a904      	add	r1, sp, #16
 8001b9e:	f000 f87d 	bl	8001c9c <_printf_i>
 8001ba2:	e7ed      	b.n	8001b80 <_svfiprintf_r+0x1c0>
 8001ba4:	08002026 	.word	0x08002026
 8001ba8:	0800202c 	.word	0x0800202c
 8001bac:	08002030 	.word	0x08002030
 8001bb0:	00000000 	.word	0x00000000
 8001bb4:	08001909 	.word	0x08001909

08001bb8 <_printf_common>:
 8001bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bbc:	4616      	mov	r6, r2
 8001bbe:	4698      	mov	r8, r3
 8001bc0:	688a      	ldr	r2, [r1, #8]
 8001bc2:	690b      	ldr	r3, [r1, #16]
 8001bc4:	4607      	mov	r7, r0
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	bfb8      	it	lt
 8001bca:	4613      	movlt	r3, r2
 8001bcc:	6033      	str	r3, [r6, #0]
 8001bce:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001bd2:	460c      	mov	r4, r1
 8001bd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001bd8:	b10a      	cbz	r2, 8001bde <_printf_common+0x26>
 8001bda:	3301      	adds	r3, #1
 8001bdc:	6033      	str	r3, [r6, #0]
 8001bde:	6823      	ldr	r3, [r4, #0]
 8001be0:	0699      	lsls	r1, r3, #26
 8001be2:	bf42      	ittt	mi
 8001be4:	6833      	ldrmi	r3, [r6, #0]
 8001be6:	3302      	addmi	r3, #2
 8001be8:	6033      	strmi	r3, [r6, #0]
 8001bea:	6825      	ldr	r5, [r4, #0]
 8001bec:	f015 0506 	ands.w	r5, r5, #6
 8001bf0:	d106      	bne.n	8001c00 <_printf_common+0x48>
 8001bf2:	f104 0a19 	add.w	sl, r4, #25
 8001bf6:	68e3      	ldr	r3, [r4, #12]
 8001bf8:	6832      	ldr	r2, [r6, #0]
 8001bfa:	1a9b      	subs	r3, r3, r2
 8001bfc:	42ab      	cmp	r3, r5
 8001bfe:	dc2b      	bgt.n	8001c58 <_printf_common+0xa0>
 8001c00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001c04:	6822      	ldr	r2, [r4, #0]
 8001c06:	3b00      	subs	r3, #0
 8001c08:	bf18      	it	ne
 8001c0a:	2301      	movne	r3, #1
 8001c0c:	0692      	lsls	r2, r2, #26
 8001c0e:	d430      	bmi.n	8001c72 <_printf_common+0xba>
 8001c10:	4641      	mov	r1, r8
 8001c12:	4638      	mov	r0, r7
 8001c14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001c18:	47c8      	blx	r9
 8001c1a:	3001      	adds	r0, #1
 8001c1c:	d023      	beq.n	8001c66 <_printf_common+0xae>
 8001c1e:	6823      	ldr	r3, [r4, #0]
 8001c20:	6922      	ldr	r2, [r4, #16]
 8001c22:	f003 0306 	and.w	r3, r3, #6
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	bf14      	ite	ne
 8001c2a:	2500      	movne	r5, #0
 8001c2c:	6833      	ldreq	r3, [r6, #0]
 8001c2e:	f04f 0600 	mov.w	r6, #0
 8001c32:	bf08      	it	eq
 8001c34:	68e5      	ldreq	r5, [r4, #12]
 8001c36:	f104 041a 	add.w	r4, r4, #26
 8001c3a:	bf08      	it	eq
 8001c3c:	1aed      	subeq	r5, r5, r3
 8001c3e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001c42:	bf08      	it	eq
 8001c44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	bfc4      	itt	gt
 8001c4c:	1a9b      	subgt	r3, r3, r2
 8001c4e:	18ed      	addgt	r5, r5, r3
 8001c50:	42b5      	cmp	r5, r6
 8001c52:	d11a      	bne.n	8001c8a <_printf_common+0xd2>
 8001c54:	2000      	movs	r0, #0
 8001c56:	e008      	b.n	8001c6a <_printf_common+0xb2>
 8001c58:	2301      	movs	r3, #1
 8001c5a:	4652      	mov	r2, sl
 8001c5c:	4641      	mov	r1, r8
 8001c5e:	4638      	mov	r0, r7
 8001c60:	47c8      	blx	r9
 8001c62:	3001      	adds	r0, #1
 8001c64:	d103      	bne.n	8001c6e <_printf_common+0xb6>
 8001c66:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c6e:	3501      	adds	r5, #1
 8001c70:	e7c1      	b.n	8001bf6 <_printf_common+0x3e>
 8001c72:	2030      	movs	r0, #48	@ 0x30
 8001c74:	18e1      	adds	r1, r4, r3
 8001c76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001c7a:	1c5a      	adds	r2, r3, #1
 8001c7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001c80:	4422      	add	r2, r4
 8001c82:	3302      	adds	r3, #2
 8001c84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001c88:	e7c2      	b.n	8001c10 <_printf_common+0x58>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	4622      	mov	r2, r4
 8001c8e:	4641      	mov	r1, r8
 8001c90:	4638      	mov	r0, r7
 8001c92:	47c8      	blx	r9
 8001c94:	3001      	adds	r0, #1
 8001c96:	d0e6      	beq.n	8001c66 <_printf_common+0xae>
 8001c98:	3601      	adds	r6, #1
 8001c9a:	e7d9      	b.n	8001c50 <_printf_common+0x98>

08001c9c <_printf_i>:
 8001c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ca0:	7e0f      	ldrb	r7, [r1, #24]
 8001ca2:	4691      	mov	r9, r2
 8001ca4:	2f78      	cmp	r7, #120	@ 0x78
 8001ca6:	4680      	mov	r8, r0
 8001ca8:	460c      	mov	r4, r1
 8001caa:	469a      	mov	sl, r3
 8001cac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001cae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001cb2:	d807      	bhi.n	8001cc4 <_printf_i+0x28>
 8001cb4:	2f62      	cmp	r7, #98	@ 0x62
 8001cb6:	d80a      	bhi.n	8001cce <_printf_i+0x32>
 8001cb8:	2f00      	cmp	r7, #0
 8001cba:	f000 80d1 	beq.w	8001e60 <_printf_i+0x1c4>
 8001cbe:	2f58      	cmp	r7, #88	@ 0x58
 8001cc0:	f000 80b8 	beq.w	8001e34 <_printf_i+0x198>
 8001cc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001cc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001ccc:	e03a      	b.n	8001d44 <_printf_i+0xa8>
 8001cce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001cd2:	2b15      	cmp	r3, #21
 8001cd4:	d8f6      	bhi.n	8001cc4 <_printf_i+0x28>
 8001cd6:	a101      	add	r1, pc, #4	@ (adr r1, 8001cdc <_printf_i+0x40>)
 8001cd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001cdc:	08001d35 	.word	0x08001d35
 8001ce0:	08001d49 	.word	0x08001d49
 8001ce4:	08001cc5 	.word	0x08001cc5
 8001ce8:	08001cc5 	.word	0x08001cc5
 8001cec:	08001cc5 	.word	0x08001cc5
 8001cf0:	08001cc5 	.word	0x08001cc5
 8001cf4:	08001d49 	.word	0x08001d49
 8001cf8:	08001cc5 	.word	0x08001cc5
 8001cfc:	08001cc5 	.word	0x08001cc5
 8001d00:	08001cc5 	.word	0x08001cc5
 8001d04:	08001cc5 	.word	0x08001cc5
 8001d08:	08001e47 	.word	0x08001e47
 8001d0c:	08001d73 	.word	0x08001d73
 8001d10:	08001e01 	.word	0x08001e01
 8001d14:	08001cc5 	.word	0x08001cc5
 8001d18:	08001cc5 	.word	0x08001cc5
 8001d1c:	08001e69 	.word	0x08001e69
 8001d20:	08001cc5 	.word	0x08001cc5
 8001d24:	08001d73 	.word	0x08001d73
 8001d28:	08001cc5 	.word	0x08001cc5
 8001d2c:	08001cc5 	.word	0x08001cc5
 8001d30:	08001e09 	.word	0x08001e09
 8001d34:	6833      	ldr	r3, [r6, #0]
 8001d36:	1d1a      	adds	r2, r3, #4
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6032      	str	r2, [r6, #0]
 8001d3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001d40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001d44:	2301      	movs	r3, #1
 8001d46:	e09c      	b.n	8001e82 <_printf_i+0x1e6>
 8001d48:	6833      	ldr	r3, [r6, #0]
 8001d4a:	6820      	ldr	r0, [r4, #0]
 8001d4c:	1d19      	adds	r1, r3, #4
 8001d4e:	6031      	str	r1, [r6, #0]
 8001d50:	0606      	lsls	r6, r0, #24
 8001d52:	d501      	bpl.n	8001d58 <_printf_i+0xbc>
 8001d54:	681d      	ldr	r5, [r3, #0]
 8001d56:	e003      	b.n	8001d60 <_printf_i+0xc4>
 8001d58:	0645      	lsls	r5, r0, #25
 8001d5a:	d5fb      	bpl.n	8001d54 <_printf_i+0xb8>
 8001d5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001d60:	2d00      	cmp	r5, #0
 8001d62:	da03      	bge.n	8001d6c <_printf_i+0xd0>
 8001d64:	232d      	movs	r3, #45	@ 0x2d
 8001d66:	426d      	negs	r5, r5
 8001d68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001d6c:	230a      	movs	r3, #10
 8001d6e:	4858      	ldr	r0, [pc, #352]	@ (8001ed0 <_printf_i+0x234>)
 8001d70:	e011      	b.n	8001d96 <_printf_i+0xfa>
 8001d72:	6821      	ldr	r1, [r4, #0]
 8001d74:	6833      	ldr	r3, [r6, #0]
 8001d76:	0608      	lsls	r0, r1, #24
 8001d78:	f853 5b04 	ldr.w	r5, [r3], #4
 8001d7c:	d402      	bmi.n	8001d84 <_printf_i+0xe8>
 8001d7e:	0649      	lsls	r1, r1, #25
 8001d80:	bf48      	it	mi
 8001d82:	b2ad      	uxthmi	r5, r5
 8001d84:	2f6f      	cmp	r7, #111	@ 0x6f
 8001d86:	6033      	str	r3, [r6, #0]
 8001d88:	bf14      	ite	ne
 8001d8a:	230a      	movne	r3, #10
 8001d8c:	2308      	moveq	r3, #8
 8001d8e:	4850      	ldr	r0, [pc, #320]	@ (8001ed0 <_printf_i+0x234>)
 8001d90:	2100      	movs	r1, #0
 8001d92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001d96:	6866      	ldr	r6, [r4, #4]
 8001d98:	2e00      	cmp	r6, #0
 8001d9a:	60a6      	str	r6, [r4, #8]
 8001d9c:	db05      	blt.n	8001daa <_printf_i+0x10e>
 8001d9e:	6821      	ldr	r1, [r4, #0]
 8001da0:	432e      	orrs	r6, r5
 8001da2:	f021 0104 	bic.w	r1, r1, #4
 8001da6:	6021      	str	r1, [r4, #0]
 8001da8:	d04b      	beq.n	8001e42 <_printf_i+0x1a6>
 8001daa:	4616      	mov	r6, r2
 8001dac:	fbb5 f1f3 	udiv	r1, r5, r3
 8001db0:	fb03 5711 	mls	r7, r3, r1, r5
 8001db4:	5dc7      	ldrb	r7, [r0, r7]
 8001db6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001dba:	462f      	mov	r7, r5
 8001dbc:	42bb      	cmp	r3, r7
 8001dbe:	460d      	mov	r5, r1
 8001dc0:	d9f4      	bls.n	8001dac <_printf_i+0x110>
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d10b      	bne.n	8001dde <_printf_i+0x142>
 8001dc6:	6823      	ldr	r3, [r4, #0]
 8001dc8:	07df      	lsls	r7, r3, #31
 8001dca:	d508      	bpl.n	8001dde <_printf_i+0x142>
 8001dcc:	6923      	ldr	r3, [r4, #16]
 8001dce:	6861      	ldr	r1, [r4, #4]
 8001dd0:	4299      	cmp	r1, r3
 8001dd2:	bfde      	ittt	le
 8001dd4:	2330      	movle	r3, #48	@ 0x30
 8001dd6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001dda:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001dde:	1b92      	subs	r2, r2, r6
 8001de0:	6122      	str	r2, [r4, #16]
 8001de2:	464b      	mov	r3, r9
 8001de4:	4621      	mov	r1, r4
 8001de6:	4640      	mov	r0, r8
 8001de8:	f8cd a000 	str.w	sl, [sp]
 8001dec:	aa03      	add	r2, sp, #12
 8001dee:	f7ff fee3 	bl	8001bb8 <_printf_common>
 8001df2:	3001      	adds	r0, #1
 8001df4:	d14a      	bne.n	8001e8c <_printf_i+0x1f0>
 8001df6:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfa:	b004      	add	sp, #16
 8001dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e00:	6823      	ldr	r3, [r4, #0]
 8001e02:	f043 0320 	orr.w	r3, r3, #32
 8001e06:	6023      	str	r3, [r4, #0]
 8001e08:	2778      	movs	r7, #120	@ 0x78
 8001e0a:	4832      	ldr	r0, [pc, #200]	@ (8001ed4 <_printf_i+0x238>)
 8001e0c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001e10:	6823      	ldr	r3, [r4, #0]
 8001e12:	6831      	ldr	r1, [r6, #0]
 8001e14:	061f      	lsls	r7, r3, #24
 8001e16:	f851 5b04 	ldr.w	r5, [r1], #4
 8001e1a:	d402      	bmi.n	8001e22 <_printf_i+0x186>
 8001e1c:	065f      	lsls	r7, r3, #25
 8001e1e:	bf48      	it	mi
 8001e20:	b2ad      	uxthmi	r5, r5
 8001e22:	6031      	str	r1, [r6, #0]
 8001e24:	07d9      	lsls	r1, r3, #31
 8001e26:	bf44      	itt	mi
 8001e28:	f043 0320 	orrmi.w	r3, r3, #32
 8001e2c:	6023      	strmi	r3, [r4, #0]
 8001e2e:	b11d      	cbz	r5, 8001e38 <_printf_i+0x19c>
 8001e30:	2310      	movs	r3, #16
 8001e32:	e7ad      	b.n	8001d90 <_printf_i+0xf4>
 8001e34:	4826      	ldr	r0, [pc, #152]	@ (8001ed0 <_printf_i+0x234>)
 8001e36:	e7e9      	b.n	8001e0c <_printf_i+0x170>
 8001e38:	6823      	ldr	r3, [r4, #0]
 8001e3a:	f023 0320 	bic.w	r3, r3, #32
 8001e3e:	6023      	str	r3, [r4, #0]
 8001e40:	e7f6      	b.n	8001e30 <_printf_i+0x194>
 8001e42:	4616      	mov	r6, r2
 8001e44:	e7bd      	b.n	8001dc2 <_printf_i+0x126>
 8001e46:	6833      	ldr	r3, [r6, #0]
 8001e48:	6825      	ldr	r5, [r4, #0]
 8001e4a:	1d18      	adds	r0, r3, #4
 8001e4c:	6961      	ldr	r1, [r4, #20]
 8001e4e:	6030      	str	r0, [r6, #0]
 8001e50:	062e      	lsls	r6, r5, #24
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	d501      	bpl.n	8001e5a <_printf_i+0x1be>
 8001e56:	6019      	str	r1, [r3, #0]
 8001e58:	e002      	b.n	8001e60 <_printf_i+0x1c4>
 8001e5a:	0668      	lsls	r0, r5, #25
 8001e5c:	d5fb      	bpl.n	8001e56 <_printf_i+0x1ba>
 8001e5e:	8019      	strh	r1, [r3, #0]
 8001e60:	2300      	movs	r3, #0
 8001e62:	4616      	mov	r6, r2
 8001e64:	6123      	str	r3, [r4, #16]
 8001e66:	e7bc      	b.n	8001de2 <_printf_i+0x146>
 8001e68:	6833      	ldr	r3, [r6, #0]
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	1d1a      	adds	r2, r3, #4
 8001e6e:	6032      	str	r2, [r6, #0]
 8001e70:	681e      	ldr	r6, [r3, #0]
 8001e72:	6862      	ldr	r2, [r4, #4]
 8001e74:	4630      	mov	r0, r6
 8001e76:	f000 f859 	bl	8001f2c <memchr>
 8001e7a:	b108      	cbz	r0, 8001e80 <_printf_i+0x1e4>
 8001e7c:	1b80      	subs	r0, r0, r6
 8001e7e:	6060      	str	r0, [r4, #4]
 8001e80:	6863      	ldr	r3, [r4, #4]
 8001e82:	6123      	str	r3, [r4, #16]
 8001e84:	2300      	movs	r3, #0
 8001e86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001e8a:	e7aa      	b.n	8001de2 <_printf_i+0x146>
 8001e8c:	4632      	mov	r2, r6
 8001e8e:	4649      	mov	r1, r9
 8001e90:	4640      	mov	r0, r8
 8001e92:	6923      	ldr	r3, [r4, #16]
 8001e94:	47d0      	blx	sl
 8001e96:	3001      	adds	r0, #1
 8001e98:	d0ad      	beq.n	8001df6 <_printf_i+0x15a>
 8001e9a:	6823      	ldr	r3, [r4, #0]
 8001e9c:	079b      	lsls	r3, r3, #30
 8001e9e:	d413      	bmi.n	8001ec8 <_printf_i+0x22c>
 8001ea0:	68e0      	ldr	r0, [r4, #12]
 8001ea2:	9b03      	ldr	r3, [sp, #12]
 8001ea4:	4298      	cmp	r0, r3
 8001ea6:	bfb8      	it	lt
 8001ea8:	4618      	movlt	r0, r3
 8001eaa:	e7a6      	b.n	8001dfa <_printf_i+0x15e>
 8001eac:	2301      	movs	r3, #1
 8001eae:	4632      	mov	r2, r6
 8001eb0:	4649      	mov	r1, r9
 8001eb2:	4640      	mov	r0, r8
 8001eb4:	47d0      	blx	sl
 8001eb6:	3001      	adds	r0, #1
 8001eb8:	d09d      	beq.n	8001df6 <_printf_i+0x15a>
 8001eba:	3501      	adds	r5, #1
 8001ebc:	68e3      	ldr	r3, [r4, #12]
 8001ebe:	9903      	ldr	r1, [sp, #12]
 8001ec0:	1a5b      	subs	r3, r3, r1
 8001ec2:	42ab      	cmp	r3, r5
 8001ec4:	dcf2      	bgt.n	8001eac <_printf_i+0x210>
 8001ec6:	e7eb      	b.n	8001ea0 <_printf_i+0x204>
 8001ec8:	2500      	movs	r5, #0
 8001eca:	f104 0619 	add.w	r6, r4, #25
 8001ece:	e7f5      	b.n	8001ebc <_printf_i+0x220>
 8001ed0:	08002037 	.word	0x08002037
 8001ed4:	08002048 	.word	0x08002048

08001ed8 <memmove>:
 8001ed8:	4288      	cmp	r0, r1
 8001eda:	b510      	push	{r4, lr}
 8001edc:	eb01 0402 	add.w	r4, r1, r2
 8001ee0:	d902      	bls.n	8001ee8 <memmove+0x10>
 8001ee2:	4284      	cmp	r4, r0
 8001ee4:	4623      	mov	r3, r4
 8001ee6:	d807      	bhi.n	8001ef8 <memmove+0x20>
 8001ee8:	1e43      	subs	r3, r0, #1
 8001eea:	42a1      	cmp	r1, r4
 8001eec:	d008      	beq.n	8001f00 <memmove+0x28>
 8001eee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001ef2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001ef6:	e7f8      	b.n	8001eea <memmove+0x12>
 8001ef8:	4601      	mov	r1, r0
 8001efa:	4402      	add	r2, r0
 8001efc:	428a      	cmp	r2, r1
 8001efe:	d100      	bne.n	8001f02 <memmove+0x2a>
 8001f00:	bd10      	pop	{r4, pc}
 8001f02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001f06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001f0a:	e7f7      	b.n	8001efc <memmove+0x24>

08001f0c <_sbrk_r>:
 8001f0c:	b538      	push	{r3, r4, r5, lr}
 8001f0e:	2300      	movs	r3, #0
 8001f10:	4d05      	ldr	r5, [pc, #20]	@ (8001f28 <_sbrk_r+0x1c>)
 8001f12:	4604      	mov	r4, r0
 8001f14:	4608      	mov	r0, r1
 8001f16:	602b      	str	r3, [r5, #0]
 8001f18:	f7fe fc64 	bl	80007e4 <_sbrk>
 8001f1c:	1c43      	adds	r3, r0, #1
 8001f1e:	d102      	bne.n	8001f26 <_sbrk_r+0x1a>
 8001f20:	682b      	ldr	r3, [r5, #0]
 8001f22:	b103      	cbz	r3, 8001f26 <_sbrk_r+0x1a>
 8001f24:	6023      	str	r3, [r4, #0]
 8001f26:	bd38      	pop	{r3, r4, r5, pc}
 8001f28:	200001b8 	.word	0x200001b8

08001f2c <memchr>:
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	b510      	push	{r4, lr}
 8001f30:	b2c9      	uxtb	r1, r1
 8001f32:	4402      	add	r2, r0
 8001f34:	4293      	cmp	r3, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	d101      	bne.n	8001f3e <memchr+0x12>
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	e003      	b.n	8001f46 <memchr+0x1a>
 8001f3e:	7804      	ldrb	r4, [r0, #0]
 8001f40:	3301      	adds	r3, #1
 8001f42:	428c      	cmp	r4, r1
 8001f44:	d1f6      	bne.n	8001f34 <memchr+0x8>
 8001f46:	bd10      	pop	{r4, pc}

08001f48 <memcpy>:
 8001f48:	440a      	add	r2, r1
 8001f4a:	4291      	cmp	r1, r2
 8001f4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001f50:	d100      	bne.n	8001f54 <memcpy+0xc>
 8001f52:	4770      	bx	lr
 8001f54:	b510      	push	{r4, lr}
 8001f56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001f5a:	4291      	cmp	r1, r2
 8001f5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001f60:	d1f9      	bne.n	8001f56 <memcpy+0xe>
 8001f62:	bd10      	pop	{r4, pc}

08001f64 <_realloc_r>:
 8001f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f68:	4607      	mov	r7, r0
 8001f6a:	4614      	mov	r4, r2
 8001f6c:	460d      	mov	r5, r1
 8001f6e:	b921      	cbnz	r1, 8001f7a <_realloc_r+0x16>
 8001f70:	4611      	mov	r1, r2
 8001f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f76:	f7ff bc3b 	b.w	80017f0 <_malloc_r>
 8001f7a:	b92a      	cbnz	r2, 8001f88 <_realloc_r+0x24>
 8001f7c:	f7ff fbce 	bl	800171c <_free_r>
 8001f80:	4625      	mov	r5, r4
 8001f82:	4628      	mov	r0, r5
 8001f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f88:	f000 f81a 	bl	8001fc0 <_malloc_usable_size_r>
 8001f8c:	4284      	cmp	r4, r0
 8001f8e:	4606      	mov	r6, r0
 8001f90:	d802      	bhi.n	8001f98 <_realloc_r+0x34>
 8001f92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001f96:	d8f4      	bhi.n	8001f82 <_realloc_r+0x1e>
 8001f98:	4621      	mov	r1, r4
 8001f9a:	4638      	mov	r0, r7
 8001f9c:	f7ff fc28 	bl	80017f0 <_malloc_r>
 8001fa0:	4680      	mov	r8, r0
 8001fa2:	b908      	cbnz	r0, 8001fa8 <_realloc_r+0x44>
 8001fa4:	4645      	mov	r5, r8
 8001fa6:	e7ec      	b.n	8001f82 <_realloc_r+0x1e>
 8001fa8:	42b4      	cmp	r4, r6
 8001faa:	4622      	mov	r2, r4
 8001fac:	4629      	mov	r1, r5
 8001fae:	bf28      	it	cs
 8001fb0:	4632      	movcs	r2, r6
 8001fb2:	f7ff ffc9 	bl	8001f48 <memcpy>
 8001fb6:	4629      	mov	r1, r5
 8001fb8:	4638      	mov	r0, r7
 8001fba:	f7ff fbaf 	bl	800171c <_free_r>
 8001fbe:	e7f1      	b.n	8001fa4 <_realloc_r+0x40>

08001fc0 <_malloc_usable_size_r>:
 8001fc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001fc4:	1f18      	subs	r0, r3, #4
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	bfbc      	itt	lt
 8001fca:	580b      	ldrlt	r3, [r1, r0]
 8001fcc:	18c0      	addlt	r0, r0, r3
 8001fce:	4770      	bx	lr

08001fd0 <_init>:
 8001fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fd2:	bf00      	nop
 8001fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fd6:	bc08      	pop	{r3}
 8001fd8:	469e      	mov	lr, r3
 8001fda:	4770      	bx	lr

08001fdc <_fini>:
 8001fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fde:	bf00      	nop
 8001fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fe2:	bc08      	pop	{r3}
 8001fe4:	469e      	mov	lr, r3
 8001fe6:	4770      	bx	lr
